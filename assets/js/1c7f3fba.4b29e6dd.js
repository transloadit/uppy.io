"use strict";(self.webpackChunkuppy_io=self.webpackChunkuppy_io||[]).push([[2580],{92967:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>m,frontMatter:()=>d,metadata:()=>p,toc:()=>u});var i=t(74848),s=t(28453),l=t(11470),o=t(19365),r=t(65171);const d={sidebar_position:3,slug:"/file-input"},c="File input",p={id:"sources/file-input",title:"File input",description:"The @uppy/file-input plugin is the most barebones UI for selecting files \u2014 it",source:"@site/docs/sources/file-input.mdx",sourceDirName:"sources",slug:"/file-input",permalink:"/docs/file-input",draft:!1,unlisted:!1,editUrl:"https://github.com/transloadit/uppy/blob/main/docs/sources/file-input.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,slug:"/file-input"},sidebar:"tutorialSidebar",previous:{title:"Zoom",permalink:"/docs/zoom"},next:{title:"Transloadit",permalink:"/docs/transloadit"}},a={},u=[{value:"When should I use it?",id:"when-should-i-use-it",level:2},{value:"Install",id:"install",level:2},{value:"Use",id:"use",level:2},{value:"API",id:"api",level:2},{value:"Options",id:"options",level:3},{value:"<code>id</code>",id:"id",level:4},{value:"<code>title</code>",id:"title",level:4},{value:"<code>target</code>",id:"target",level:4},{value:"<code>pretty</code>",id:"pretty",level:4},{value:"<code>inputName</code>",id:"inputname",level:4},{value:"<code>locale</code>",id:"locale",level:4},{value:"Custom file inpt",id:"custom-file-inpt",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"file-input",children:"File input"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"@uppy/file-input"})," plugin is the most barebones UI for selecting files \u2014 it\nshows a single button that, when clicked, opens up the browser\u2019s file selector."]}),"\n",(0,i.jsx)(n.h2,{id:"when-should-i-use-it",children:"When should I use it?"}),"\n",(0,i.jsx)(n.p,{children:"When you want users to select files from their local machine with a minimal UI."}),"\n",(0,i.jsx)(n.h2,{id:"install",children:"Install"}),"\n",(0,i.jsxs)(l.A,{children:[(0,i.jsx)(o.A,{value:"npm",label:"NPM",default:!0,children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"npm install @uppy/file-input\n"})})}),(0,i.jsx)(o.A,{value:"yarn",label:"Yarn",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"yarn add @uppy/file-input\n"})})}),(0,i.jsx)(o.A,{value:"cdn",label:"CDN",children:(0,i.jsx)(r.A,{children:'\n        import { Uppy, FileInput } from "{{UPPY_JS_URL}}"\n        const uppy = new Uppy()\n        uppy.use(FileInput, { target: document.body })\n      '})})]}),"\n",(0,i.jsx)(n.h2,{id:"use",children:"Use"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:"showLineNumbers",children:"import Uppy from '@uppy/core';\nimport FileInput from '@uppy/file-input';\n\nimport '@uppy/core/dist/style.min.css';\nimport '@uppy/file-input/dist/style.css';\n\nnew Uppy().use(FileInput, { target: '#uppy-file-input' });\n"})}),"\n",(0,i.jsxs)(n.admonition,{type:"note",children:[(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"@uppy/file-input"})," plugin includes some basic styles for use with the\n",(0,i.jsx)(n.a,{href:"#pretty-true",children:(0,i.jsx)(n.code,{children:"pretty"})})," option, like shown in the\n",(0,i.jsx)(n.a,{href:"/examples/xhrupload",children:"example"}),". You can also choose not to use it and provide\nyour own styles instead."]}),(0,i.jsxs)(n.p,{children:["Import general Core styles from ",(0,i.jsx)(n.code,{children:"@uppy/core/dist/style.css"})," first, then add the\nFile Input styles from ",(0,i.jsx)(n.code,{children:"@uppy/file-input/dist/style.css"}),". A minified version is\nalso available as ",(0,i.jsx)(n.code,{children:"style.min.css"})," at the same path. The way to do import depends\non your build system."]})]}),"\n",(0,i.jsx)(n.h2,{id:"api",children:"API"}),"\n",(0,i.jsx)(n.h3,{id:"options",children:"Options"}),"\n",(0,i.jsx)(n.h4,{id:"id",children:(0,i.jsx)(n.code,{children:"id"})}),"\n",(0,i.jsxs)(n.p,{children:["A unique identifier for this plugin (",(0,i.jsx)(n.code,{children:"string"}),", default: ",(0,i.jsx)(n.code,{children:"'FileInput'"}),")."]}),"\n",(0,i.jsx)(n.h4,{id:"title",children:(0,i.jsx)(n.code,{children:"title"})}),"\n",(0,i.jsxs)(n.p,{children:["Configures the title / name shown in the UI, for instance, on Dashboard tabs\n(",(0,i.jsx)(n.code,{children:"string"}),", default: ",(0,i.jsx)(n.code,{children:"'File Input'"}),")."]}),"\n",(0,i.jsx)(n.h4,{id:"target",children:(0,i.jsx)(n.code,{children:"target"})}),"\n",(0,i.jsxs)(n.p,{children:["DOM element, CSS selector, or plugin to place the audio into (",(0,i.jsx)(n.code,{children:"string"})," or\n",(0,i.jsx)(n.code,{children:"Element"}),", default: ",(0,i.jsx)(n.code,{children:"null"}),")."]}),"\n",(0,i.jsx)(n.h4,{id:"pretty",children:(0,i.jsx)(n.code,{children:"pretty"})}),"\n",(0,i.jsxs)(n.p,{children:["When true, display a styled button that, when clicked, opens the file selector\nUI. When false, a plain old browser ",(0,i.jsx)(n.code,{children:'<input type="file">'})," element is shown\n(",(0,i.jsx)(n.code,{children:"boolean"}),", default: ",(0,i.jsx)(n.code,{children:"true"}),")."]}),"\n",(0,i.jsx)(n.h4,{id:"inputname",children:(0,i.jsx)(n.code,{children:"inputName"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"name"})," attribute for the ",(0,i.jsx)(n.code,{children:'<input type="file">'})," element (",(0,i.jsx)(n.code,{children:"string"}),", default:\n",(0,i.jsx)(n.code,{children:"'files[]'"}),")."]}),"\n",(0,i.jsx)(n.h4,{id:"locale",children:(0,i.jsx)(n.code,{children:"locale"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"export default {\n\tstrings: {\n\t\t// The same key is used for the same purpose by @uppy/robodog's `form()` API, but our\n\t\t// locale pack scripts can't access it in Robodog. If it is updated here, it should\n\t\t// also be updated there!\n\t\tchooseFiles: 'Choose files',\n\t},\n};\n"})}),"\n",(0,i.jsx)(n.h2,{id:"custom-file-inpt",children:"Custom file inpt"}),"\n",(0,i.jsxs)(n.p,{children:["If you don\u2019t like the look/feel of the button rendered by ",(0,i.jsx)(n.code,{children:"@uppy/file-input"}),",\nfeel free to forgo the plugin and use your own custom button on a page, like so:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:'<input type="file" id="my-file-input" />\n'})}),"\n",(0,i.jsx)(n.p,{children:"Then add this JS to attach it to Uppy:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const uppy = new Uppy(/* ... */);\nconst fileInput = document.querySelector('#my-file-input');\n\nfileInput.addEventListener('change', (event) => {\n\tconst files = Array.from(event.target.files);\n\n\tfiles.forEach((file) => {\n\t\ttry {\n\t\t\tuppy.addFile({\n\t\t\t\tsource: 'file input',\n\t\t\t\tname: file.name,\n\t\t\t\ttype: file.type,\n\t\t\t\tdata: file,\n\t\t\t});\n\t\t} catch (err) {\n\t\t\tif (err.isRestriction) {\n\t\t\t\t// handle restrictions\n\t\t\t\tconsole.log('Restriction error:', err);\n\t\t\t} else {\n\t\t\t\t// handle other errors\n\t\t\t\tconsole.error(err);\n\t\t\t}\n\t\t}\n\t});\n});\n\n// Clear the `<input>` after the upload or when the file was removed\n// so the file can be uploaded again (see\n// https://github.com/transloadit/uppy/issues/2640#issuecomment-731034781).\nuppy.on('file-removed', () => {\n\tfileInput.value = null;\n});\n\nuppy.on('complete', () => {\n\tfileInput.value = null;\n});\n"})})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},65171:(e,n,t)=>{t.d(n,{A:()=>c});var i=t(96540),s=t(21432),l=t(27293),o=t(4476),r=t(74848);const{rE:d}=o;function c(e){let{children:n,uppyCssName:t="uppy.min.css",uppyJsName:o="uppy.min.mjs"}=e,c=[];i.Children.toArray(n).forEach((e=>{c=[...c,...String(e).trim().split("\n").map((e=>e.trim()))]}));const p=c.map((e=>`  ${e}`)).join("\n"),a=`https://releases.transloadit.com/uppy/v${d}/${o}`,u=`\x3c!-- 1. Add CSS to \`<head>\` --\x3e\n<link href="https://releases.transloadit.com/uppy/v${d}/${t}" rel="stylesheet">\n\n\x3c!-- 2. Initialize --\x3e\n<div id="uppy"></div>\n\n<script type="module">\n${p.replace(/{{UPPY_JS_URL}}/g,a)}\n<\/script>\n`;return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(l.A,{type:"caution",children:[(0,r.jsx)("p",{children:"The bundle consists of most Uppy plugins, so this method is not recommended for production, as your users will have to download all plugins when you are likely using only a few."}),(0,r.jsx)("p",{children:"It can be useful to speed up your development environment, so don't hesitate to use it to get you started."})]}),(0,r.jsx)(s.A,{language:"html",children:u})]})}}}]);