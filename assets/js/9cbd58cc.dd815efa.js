"use strict";(self.webpackChunkuppy_io=self.webpackChunkuppy_io||[]).push([[4228],{58517:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>h,contentTitle:()=>d,default:()=>m,frontMatter:()=>r,metadata:()=>c,toc:()=>u});var t=s(74848),o=s(28453),i=s(11470),a=s(19365),l=s(65171);const r={sidebar_position:1,slug:"/transloadit"},d="Transloadit",c={id:"uploader/transloadit",title:"Transloadit",description:"The @uppy/transloadit plugin can be used to upload files directly to",source:"@site/docs/uploader/transloadit.mdx",sourceDirName:"uploader",slug:"/transloadit",permalink:"/docs/transloadit",draft:!1,unlisted:!1,editUrl:"https://github.com/transloadit/uppy.io/blob/main/docs/uploader/transloadit.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,slug:"/transloadit"},sidebar:"tutorialSidebar",previous:{title:"File input",permalink:"/docs/file-input"},next:{title:"Tus",permalink:"/docs/tus"}},h={},u=[{value:"When should I use it?",id:"when-should-i-use-it",level:2},{value:"Install",id:"install",level:2},{value:"Use",id:"use",level:2},{value:"Use with Companion",id:"use-with-companion",level:3},{value:"API",id:"api",level:2},{value:"Options",id:"options",level:3},{value:"<code>id</code>",id:"id",level:4},{value:"<code>service</code>",id:"service",level:4},{value:"<code>limit</code>",id:"limit",level:4},{value:"<code>assemblyOptions</code>",id:"assemblyoptions",level:4},{value:"<code>waitForEncoding</code>",id:"waitforencoding",level:4},{value:"<code>waitForMetadata</code>",id:"waitformetadata",level:4},{value:"<code>importFromUploadURLs</code>",id:"importfromuploadurls",level:4},{value:"<code>alwaysRunAssembly</code>",id:"alwaysrunassembly",level:4},{value:"<code>locale</code>",id:"locale",level:4},{value:"<code>clientName</code>",id:"clientname",level:4},{value:"<code>getAssemblyOptions</code>",id:"getassemblyoptions",level:4},{value:"<code>params</code>",id:"params",level:4},{value:"<code>signature</code>",id:"signature",level:4},{value:"<code>fields</code>",id:"fields",level:4},{value:"Static exports",id:"static-exports",level:3},{value:"<code>COMPANION_URL</code>",id:"companion_url",level:4},{value:"<code>COMPANION_ALLOWED_HOSTS</code>",id:"companion_allowed_hosts",level:4},{value:"Events",id:"events",level:3},{value:"<code>transloadit:assembly-created</code>",id:"transloaditassembly-created",level:4},{value:"<code>transloadit:upload</code>",id:"transloaditupload",level:4},{value:"<code>transloadit:assembly-executing</code>",id:"transloaditassembly-executing",level:4},{value:"<code>transloadit:result</code>",id:"transloaditresult",level:4},{value:"<code>transloadit:complete</code>",id:"transloaditcomplete",level:4},{value:"Frequently Asked Questions",id:"frequently-asked-questions",level:2},{value:"Accessing the assembly when an error occurred",id:"accessing-the-assembly-when-an-error-occurred",level:3},{value:"Assembly behavior when Uppy is closed",id:"assembly-behavior-when-uppy-is-closed",level:3}];function p(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components},{Details:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"transloadit",children:"Transloadit"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"@uppy/transloadit"})," plugin can be used to upload files directly to\n",(0,t.jsx)(n.a,{href:"https://transloadit.com/",children:"Transloadit"})," for all kinds of processing, such as\ntranscoding video, resizing images, zipping/unzipping, ",(0,t.jsx)(n.a,{href:"https://transloadit.com/services/",children:"and much\nmore"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"when-should-i-use-it",children:"When should I use it?"}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["Not sure which uploader is best for you? Read\n\u201c",(0,t.jsx)(n.a,{href:"/docs/guides/choosing-uploader",children:"Choosing the uploader you need"}),"\u201d."]})}),"\n",(0,t.jsxs)(n.p,{children:["Transloadit\u2019s strength is versatility. By doing video, audio, images, documents,\nand more, you only need one vendor for ",(0,t.jsx)(n.a,{href:"https://transloadit.com/services/",children:"all your file processing\nneeds"}),". The ",(0,t.jsx)(n.code,{children:"@uppy/transloadit"})," plugin directly uploads to\nTransloadit so you only have to worry about creating a\n",(0,t.jsx)(n.a,{href:"https://transloadit.com/docs/getting-started/concepts/",children:"Template"}),". Transloadit accepts the files, processes\naccording to the instructions in the Template, and stores the results in storage\nof your choosing, such as a self-owned S3 bucket. The Transloadit plugin uses\n",(0,t.jsx)(n.a,{href:"/docs/tus",children:"Tus"})," under the hood so you don\u2019t have to sacrifice reliable,\nresumable uploads."]}),"\n",(0,t.jsxs)(n.p,{children:["You should use ",(0,t.jsx)(n.code,{children:"@uppy/transloadit"})," if you don\u2019t want to host your own Tus or\nCompanion servers, (optionally) need file processing, and store it in the\nservice (such as S3 or GCS) of your liking. All with minimal effort."]}),"\n",(0,t.jsx)(n.h2,{id:"install",children:"Install"}),"\n",(0,t.jsxs)(i.A,{children:[(0,t.jsx)(a.A,{value:"npm",label:"NPM",default:!0,children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"npm install @uppy/transloadit\n"})})}),(0,t.jsx)(a.A,{value:"yarn",label:"Yarn",children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"yarn add @uppy/transloadit\n"})})}),(0,t.jsx)(a.A,{value:"cdn",label:"CDN",children:(0,t.jsx)(l.A,{children:'\n        import { Uppy, Transloadit } from "{{UPPY_JS_URL}}"\n        new Uppy().use(Transloadit, { /* see options */ })\n      '})})]}),"\n",(0,t.jsx)(n.h2,{id:"use",children:"Use"}),"\n",(0,t.jsx)(n.p,{children:"A quick overview of the complete API."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:"{10-17} showLineNumbers",children:"import Uppy from '@uppy/core';\nimport Dashboard from '@uppy/dashboard';\nimport Transloadit from '@uppy/transloadit';\n\nimport '@uppy/core/dist/style.min.css';\nimport '@uppy/dashboard/dist/style.min.css';\n\nconst uppy = new Uppy()\n\t.use(Dashboard, { inline: true, target: 'body' })\n\t.use(Transloadit, {\n\t\tassemblyOptions: {\n\t\t\tparams: {\n\t\t\t\tauth: { key: 'your-transloadit-key' },\n\t\t\t\ttemplate_id: 'your-template-id',\n\t\t\t},\n\t\t},\n\t});\n// Optionally listen to events\nuppy.on('transloadit:assembly-created', (assembly, fileIDs) => {});\nuppy.on('transloadit:upload', (file, assembly) => {});\nuppy.on('transloadit:assembly-executing', (assembly) => {});\nuppy.on('transloadit:result', (stepName, result, assembly) => {});\nuppy.on('transloadit:complete', (assembly) => {});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"use-with-companion",children:"Use with Companion"}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["All ",(0,t.jsx)(n.a,{href:"https://transloadit.com/pricing/",children:"Transloadit plans"})," come with a hosted\nversion of Companion."]})}),"\n",(0,t.jsx)(n.p,{children:"You can use this plugin together with Transloadit\u2019s hosted Companion service to\nlet your users import files from third party sources across the web. To do so\neach provider plugin must be configured with Transloadit\u2019s Companion URLs:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"import { COMPANION_URL, COMPANION_ALLOWED_HOSTS } from '@uppy/transloadit';\nimport Dropbox from '@uppy/dropbox';\n\nuppy.use(Dropbox, {\n\tcompanionUrl: COMPANION_URL,\n\tcompanionAllowedHosts: COMPANION_ALLOWED_HOSTS,\n});\n"})}),"\n",(0,t.jsx)(n.p,{children:"This will already work. Transloadit\u2019s OAuth applications are used to\nauthenticate your users by default. Your users will be asked to provide\nTransloadit access to their files. Since your users are probably not aware of\nTransloadit, this may be confusing or decrease trust. You may also hit rate\nlimits, because the OAuth application is shared between everyone using\nTransloadit."}),"\n",(0,t.jsxs)(n.p,{children:["To solve that, you can use your own OAuth keys with Transloadit\u2019s hosted\nCompanion servers by using Transloadit Template Credentials. ",(0,t.jsx)(n.a,{href:"https://transloadit.com/docs/#how-to-create-template-credentials",children:"Create a Template\nCredential"})," on the Transloadit site. Select \u201cCompanion\nOAuth\u201d for the service, and enter the key and secret for the provider you want\nto use. Then you can pass the name of the new credentials to that provider:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"import { COMPANION_URL, COMPANION_ALLOWED_HOSTS } from '@uppy/transloadit';\nimport Dropbox from '@uppy/dropbox';\n\nuppy.use(Dropbox, {\n\tcompanionUrl: COMPANION_URL,\n\tcompanionAllowedHosts: COMPANION_ALLOWED_HOSTS,\n\tcompanionKeysParams: {\n\t\tkey: 'YOUR_TRANSLOADIT_API_KEY',\n\t\tcredentialsName: 'my_companion_dropbox_creds',\n\t},\n});\n"})}),"\n",(0,t.jsx)(n.h2,{id:"api",children:"API"}),"\n",(0,t.jsx)(n.h3,{id:"options",children:"Options"}),"\n",(0,t.jsx)(n.h4,{id:"id",children:(0,t.jsx)(n.code,{children:"id"})}),"\n",(0,t.jsxs)(n.p,{children:["A unique identifier for this plugin (",(0,t.jsx)(n.code,{children:"string"}),", default: ",(0,t.jsx)(n.code,{children:"'Transloadit'"}),")."]}),"\n",(0,t.jsx)(n.h4,{id:"service",children:(0,t.jsx)(n.code,{children:"service"})}),"\n",(0,t.jsxs)(n.p,{children:["The Transloadit API URL to use (",(0,t.jsx)(n.code,{children:"string"}),", default:\n",(0,t.jsx)(n.code,{children:"https://api2.transloadit.com"}),")."]}),"\n",(0,t.jsxs)(n.p,{children:["The default will try to route traffic efficiently based on the location of your\nusers. You could for instance set it to ",(0,t.jsx)(n.code,{children:"https://api2-us-east-1.transloadit.com"}),"\nif you need the traffic to stay inside a particular region."]}),"\n",(0,t.jsx)(n.h4,{id:"limit",children:(0,t.jsx)(n.code,{children:"limit"})}),"\n",(0,t.jsxs)(n.p,{children:["Limit the amount of uploads going on at the same time (",(0,t.jsx)(n.code,{children:"number"}),", default: ",(0,t.jsx)(n.code,{children:"20"}),")."]}),"\n",(0,t.jsxs)(n.p,{children:["Setting this to ",(0,t.jsx)(n.code,{children:"0"})," means no limit on concurrent uploads, but we recommend a\nvalue between ",(0,t.jsx)(n.code,{children:"5"})," and ",(0,t.jsx)(n.code,{children:"20"}),". This option is passed through to the\n",(0,t.jsx)(n.a,{href:"/docs/tus",children:(0,t.jsx)(n.code,{children:"@uppy/tus"})})," plugin, which this plugin uses internally."]}),"\n",(0,t.jsx)(n.h4,{id:"assemblyoptions",children:(0,t.jsx)(n.code,{children:"assemblyOptions"})}),"\n",(0,t.jsxs)(n.p,{children:["Configure the\n",(0,t.jsx)(n.a,{href:"https://transloadit.com/docs/topics/assembly-instructions/",children:"Assembly Instructions"}),",\nthe fields to send along to the assembly, and authentication\n(",(0,t.jsx)(n.code,{children:"object | function"}),", default: ",(0,t.jsx)(n.code,{children:"null"}),")."]}),"\n",(0,t.jsx)(n.p,{children:"The object you can pass or return from a function has this structure:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"{\n  params: {\n    auth: { key: 'key-from-transloadit' },\n    template_id: 'id-from-transloadit',\n    steps: {\n      // Overruling Template at runtime\n    },\n    notify_url: 'https://your-domain.com/assembly-status',\n  },\n  signature: 'generated-signature',\n  fields: {\n    // Dynamic or static fields to send along\n  },\n}\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"params"})," is used to authenticate with Transloadit and using your desired\n",(0,t.jsx)(n.a,{href:"https://transloadit.com/docs/topics/templates/",children:"template"}),".","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"auth.key"})," ",(0,t.jsx)(n.em,{children:"(required)"})," is your authentication key which you can find on the\n\u201cCredentials\u201d page of your account."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"template_id"})," ",(0,t.jsx)(n.em,{children:"(required)"})," is the unique identifier to use the right\ntemplate from your account."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"steps"})," ",(0,t.jsx)(n.em,{children:"(optional)"})," can be used to\n",(0,t.jsx)(n.a,{href:"https://transloadit.com/docs/topics/templates/#overruling-templates-at-runtime",children:"overrule Templates at runtime"}),".\nA typical use case might be changing the storage path on the fly based on\nthe session user id. For most use cases, we recommend to let your Templates\nhandle dynamic cases (they can accept ",(0,t.jsx)(n.code,{children:"fields"})," and execute arbitrary\nJavaScript as well), and not pass in ",(0,t.jsx)(n.code,{children:"steps"})," from a browser. The template\neditor also has extra validations and context."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"notify_url"})," ",(0,t.jsx)(n.em,{children:"(optional)"})," is a pingback with the assembly status as JSON.\nFor instance, if you don\u2019t want to block the user experience by letting them\nwait for your template to complete with\n",(0,t.jsx)(n.a,{href:"#waitForEncoding",children:(0,t.jsx)(n.code,{children:"waitForEncoding"})}),", but you do want to want to\nasynchrounously have an update, you can provide an URL which will be\n\u201cpinged\u201d with the assembly status."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"signature"})," ",(0,t.jsx)(n.em,{children:"(optional, but recommended)"})," is a cryptographic signature to\nprovide further trust in unstrusted environments. Refer to\n\u201c",(0,t.jsx)(n.a,{href:"https://transloadit.com/docs/topics/signature-authentication/",children:"Signature Authentication\u201d"}),"\nfor more information."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"fields"})," ",(0,t.jsx)(n.em,{children:"(optional)"})," can be used to to send along key/value pairs, which can\nbe\n",(0,t.jsx)(n.a,{href:"https://transloadit.com/docs/topics/assembly-instructions/#form-fields-in-instructions",children:"used dynamically in your template"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["All your files end up in a single assembly and your ",(0,t.jsx)(n.code,{children:"fields"})," are available\nglobally in your template. The metadata in your Uppy files is also sent along so\nyou can do things dynamically per file with ",(0,t.jsx)(n.code,{children:"file.user_meta"})," in your template."]})}),"\n",(0,t.jsxs)(s,{children:[(0,t.jsx)("summary",{children:"Examples"}),(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"As a function"})}),(0,t.jsx)(n.p,{children:"Most likely you want to use a function to call your backend to generate a\nsignature and return your configuration."}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"uppy.use(Transloadit, {\n\tasync assemblyOptions() {\n\t\tconst res = await fetch('/transloadit-params');\n\t\treturn res.json();\n\t},\n});\n"})}),(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"As an object"})}),(0,t.jsx)(n.p,{children:"If you don\u2019t need to change anything dynamically, you can also pass an object\ndirectly."}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"uppy.use(Transloadit, {\n\tassemblyOptions: {\n\t\tparams: { auth: { key: 'transloadit-key' } },\n\t},\n});\n"})}),(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Use with @uppy/form"})}),(0,t.jsxs)(n.p,{children:["Combine the ",(0,t.jsx)(n.code,{children:"assemblyOptions()"})," option with the ",(0,t.jsx)(n.a,{href:"/docs/form",children:"Form"})," plugin to\npass user input from a ",(0,t.jsx)(n.code,{children:"<form>"})," to a Transloadit Assembly:"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// This will add form field values to each file's `.meta` object:\nuppy.use(Form, { getMetaFromForm: true });\nuppy.use(Transloadit, {\n\tasync assemblyOptions() {\n    const res = await fetch('/transloadit-params');\n\t\treturn res.json();\n  };\n});\n"})})]}),"\n",(0,t.jsx)(n.admonition,{type:"caution",children:(0,t.jsxs)(n.p,{children:["When you go to production always make sure to set the ",(0,t.jsx)(n.code,{children:"signature"}),". ",(0,t.jsxs)(n.strong,{children:["Not using\n",(0,t.jsx)(n.a,{href:"https://transloadit.com/docs/topics/signature-authentication/",children:"Signature Authentication"}),"\ncan be a security risk"]}),". Signature Authentication is a security measure that\ncan prevent outsiders from tampering with your Assembly Instructions. While\nSignature Authentication is not implemented (yet), we recommend to disable\n",(0,t.jsx)(n.code,{children:"allow_steps_override"})," in your Templates to avoid outsiders being able to pass\nin any Instructions and storage targets on your behalf."]})}),"\n",(0,t.jsx)(n.h4,{id:"waitforencoding",children:(0,t.jsx)(n.code,{children:"waitForEncoding"})}),"\n",(0,t.jsxs)(n.p,{children:["Wait for the template to finish, rather than only the upload, before marking the\nupload complete (",(0,t.jsx)(n.code,{children:"boolean"}),", default: ",(0,t.jsx)(n.code,{children:"false"}),")."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["When ",(0,t.jsx)(n.code,{children:"false"}),", the Assemblies will complete (or error) in the background but\nUppy won\u2019t know or care about it. You may have to let Transloadit ping you via\na ",(0,t.jsx)(n.code,{children:"notify_url"})," and asynchronously inform your user (email, in-app\nnotification)."]}),"\n",(0,t.jsxs)(n.li,{children:["When ",(0,t.jsx)(n.code,{children:"true"}),", the Transloadit plugin waits for Assemblies to complete before\nthe files are marked as completed. This means users have to wait for a\npotentially long time, depending on how complicated your Assembly instructions\nare. But, you can receive the final status and transcoding results on the\nclient side with less effort."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["When this is enabled, you can listen for the\n",(0,t.jsx)(n.a,{href:"#transloaditresult",children:(0,t.jsx)(n.code,{children:"transloadit:result"})})," and\n",(0,t.jsx)(n.a,{href:"#transloaditcomplete",children:(0,t.jsx)(n.code,{children:"transloadit:complete"})})," events."]}),"\n",(0,t.jsx)(n.h4,{id:"waitformetadata",children:(0,t.jsx)(n.code,{children:"waitForMetadata"})}),"\n",(0,t.jsxs)(n.p,{children:["Wait for Transloadit\u2019s backend to catch early errors, not the entire Assembly to\ncomplete. (",(0,t.jsx)(n.code,{children:"boolean"}),", default: ",(0,t.jsx)(n.code,{children:"false"}),")"]}),"\n",(0,t.jsxs)(n.p,{children:["When set to ",(0,t.jsx)(n.code,{children:"true"}),", the Transloadit plugin waits for Transloadit\u2019s backend to\nextract metadata from all the uploaded files. This is mostly handy if you want\nto have a quick user experience (so your users don\u2019t necessarily need to wait\nfor all the encoding to complete), but you do want to let users know about some\ntypes of errors that can be caught early on, like file format issues."]}),"\n",(0,t.jsxs)(n.p,{children:["You you can listen for the ",(0,t.jsx)(n.a,{href:"#transloaditupload",children:(0,t.jsx)(n.code,{children:"transloadit:upload"})})," event when\nthis or ",(0,t.jsx)(n.code,{children:"waitForEncoding"})," is enabled."]}),"\n",(0,t.jsx)(n.h4,{id:"importfromuploadurls",children:(0,t.jsx)(n.code,{children:"importFromUploadURLs"})}),"\n",(0,t.jsxs)(n.p,{children:["Allow another plugin to upload files, and then import those files into the\nTransloadit Assembly (",(0,t.jsx)(n.code,{children:"boolean"}),", default: ",(0,t.jsx)(n.code,{children:"false"}),")."]}),"\n",(0,t.jsxs)(n.p,{children:["When enabling this option, Transloadit will ",(0,t.jsx)(n.em,{children:"not"})," configure the Tus plugin to\nupload to Transloadit. Instead, a separate upload plugin must be used. Once the\nupload completes, the Transloadit plugin adds the uploaded file to the Assembly."]}),"\n",(0,t.jsx)(n.p,{children:"For example, to upload files to an S3 bucket and then transcode them:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"uppy.use(AwsS3, {\n\tgetUploadParameters(file) {\n\t\treturn {\n\t\t\t/* upload parameters */\n\t\t};\n\t},\n});\nuppy.use(Transloadit, {\n\timportFromUploadURLs: true,\n\tassemblyOptions: {\n\t\tparams: {\n\t\t\tauth: { key: 'YOUR_API_KEY' },\n\t\t\ttemplate_id: 'YOUR_TEMPLATE_ID',\n\t\t},\n\t},\n});\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Tranloadit will download the files and expose them to your Template as\n",(0,t.jsx)(n.code,{children:":original"}),", as if they were directly uploaded from the Uppy client."]}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["For this to work, the upload plugin must assign a publicly accessible\n",(0,t.jsx)(n.code,{children:"uploadURL"})," property to the uploaded file object. The Tus and S3 plugins both do\nthis automatically, but you must configure your S3 bucket to have publicly\nreadable objects. For the XHRUpload plugin, you may have to specify a custom\n",(0,t.jsx)(n.code,{children:"getResponseData"})," function."]})}),"\n",(0,t.jsx)(n.h4,{id:"alwaysrunassembly",children:(0,t.jsx)(n.code,{children:"alwaysRunAssembly"})}),"\n",(0,t.jsxs)(n.p,{children:["Always create and run an Assembly when ",(0,t.jsx)(n.code,{children:"uppy.upload()"})," is called, even if no\nfiles were selected (",(0,t.jsx)(n.code,{children:"boolean"}),", default: ",(0,t.jsx)(n.code,{children:"false"}),")."]}),"\n",(0,t.jsxs)(n.p,{children:["This allows running Assemblies that do not receive files, but instead use a\nrobot like ",(0,t.jsx)(n.a,{href:"https://transloadit.com/docs/transcoding/#s3-import",children:(0,t.jsx)(n.code,{children:"/s3/import"})}),"\nto download the files from elsewhere, for example, for a bulk transcoding job."]}),"\n",(0,t.jsx)(n.h4,{id:"locale",children:(0,t.jsx)(n.code,{children:"locale"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"export default {\n\tstrings: {\n\t\t// Shown while Assemblies are being created for an upload.\n\t\tcreatingAssembly: 'Preparing upload...',\n\t\t// Shown if an Assembly could not be created.\n\t\tcreatingAssemblyFailed: 'Transloadit: Could not create Assembly',\n\t\t// Shown after uploads have succeeded, but when the Assembly is still executing.\n\t\t// This only shows if `waitForMetadata` or `waitForEncoding` was enabled.\n\t\tencoding: 'Encoding...',\n\t},\n};\n"})}),"\n",(0,t.jsx)(n.h4,{id:"clientname",children:(0,t.jsx)(n.code,{children:"clientName"})}),"\n",(0,t.jsxs)(n.p,{children:["Append a custom client name to the ",(0,t.jsx)(n.code,{children:"Transloadit-Client"})," header field when\ncreating an Assembly (",(0,t.jsx)(n.code,{children:"string"}),", default: ",(0,t.jsx)(n.code,{children:"null"}),")."]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"Transloadit-Client"})," header includes by default information about the used\nSDK and is included in the Assembly Status under the ",(0,t.jsx)(n.code,{children:"transloadit_client"}),"\nproperty. By providing a value, such as ",(0,t.jsx)(n.code,{children:"homepage-file-uploader"}),", you can\nidentify the client and SDK that created a given Assembly."]}),"\n",(0,t.jsxs)(s,{children:[(0,t.jsx)("summary",{children:"Deprecated options"}),(0,t.jsxs)(n.p,{children:["These options have been deprecated in favor of\n",(0,t.jsx)(n.a,{href:"#assemblyoptions",children:(0,t.jsx)(n.code,{children:"assemblyOptions"})}),", which we now recommend for all use cases.\nYou can still use these options, but they will be removed in the next major\nversion."]}),(0,t.jsx)(n.h4,{id:"getassemblyoptions",children:(0,t.jsx)(n.code,{children:"getAssemblyOptions"})}),(0,t.jsxs)(n.p,{children:["This function behaves the same as passing a function to\n",(0,t.jsx)(n.a,{href:"#assemblyoptions",children:(0,t.jsx)(n.code,{children:"assemblyOptions"})}),"."]}),(0,t.jsx)(n.h4,{id:"params",children:(0,t.jsx)(n.code,{children:"params"})}),(0,t.jsxs)(n.p,{children:["The Assembly parameters to use for the upload (",(0,t.jsx)(n.code,{children:"object"}),", default: ",(0,t.jsx)(n.code,{children:"null"}),") See\nthe Transloadit documentation on\n",(0,t.jsx)(n.a,{href:"https://transloadit.com/docs/#14-assembly-instructions",children:"Assembly Instructions"}),"\nfor further information."]}),(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"auth.key"})," Assembly parameter is required. You can also use the ",(0,t.jsx)(n.code,{children:"steps"})," or\n",(0,t.jsx)(n.code,{children:"template_id"})," options here as described in the Transloadit documentation."]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"uppy.use(Transloadit, {\n\tparams: {\n\t\tauth: { key: 'YOUR_TRANSLOADIT_KEY' },\n\t\tsteps: {\n\t\t\tencode: {\n\t\t\t\trobot: '/video/encode',\n\t\t\t\tuse: {\n\t\t\t\t\tsteps: [':original'],\n\t\t\t\t\tfields: ['file_input_field2'],\n\t\t\t\t},\n\t\t\t\tpreset: 'iphone',\n\t\t\t},\n\t\t},\n\t},\n});\n"})}),(0,t.jsx)(n.h4,{id:"signature",children:(0,t.jsx)(n.code,{children:"signature"})}),(0,t.jsxs)(n.p,{children:["An optional signature for the Assembly parameters. See the Transloadit\ndocumentation on\n",(0,t.jsx)(n.a,{href:"https://transloadit.com/docs/#26-signature-authentication",children:"Signature Authentication"}),"\nfor further information."]}),(0,t.jsxs)(n.p,{children:["If a ",(0,t.jsx)(n.code,{children:"signature"})," is provided, ",(0,t.jsx)(n.code,{children:"params"})," should be a JSON string instead of a\nJavaScript object, as otherwise the generated JSON in the browser may be\ndifferent from the JSON string that was used to generate the signature."]}),(0,t.jsx)(n.h4,{id:"fields",children:(0,t.jsx)(n.code,{children:"fields"})}),(0,t.jsxs)(n.p,{children:["An object of form fields to send along to the Assembly. Keys are field names,\nand values are field values. See also the Transloadit documentation on\n",(0,t.jsx)(n.a,{href:"https://transloadit.com/docs/#23-form-fields-in-instructions",children:"Form Fields In Instructions"}),"."]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"uppy.use(Transloadit, {\n\t// ...\n\tfields: {\n\t\tmessage: 'This is a form field',\n\t},\n});\n"})}),(0,t.jsxs)(n.p,{children:["You can also pass an array of field names to send global or file metadata along\nto the Assembly. Global metadata is set using the\n",(0,t.jsxs)(n.a,{href:"/docs/uppy/#meta",children:[(0,t.jsx)(n.code,{children:"meta"})," option"]})," in the Uppy constructor, or using the\n",(0,t.jsxs)(n.a,{href:"/docs/uppy/#uppy-setMeta-data",children:[(0,t.jsx)(n.code,{children:"setMeta"})," method"]}),". File metadata is set using\nthe ",(0,t.jsx)(n.a,{href:"/docs/uppy/#uppy-setFileMeta-fileID-data",children:(0,t.jsx)(n.code,{children:"setFileMeta"})})," method. The\n",(0,t.jsx)(n.a,{href:"/docs/form",children:"Form"})," plugin also sets global metadata based on the values of\n",(0,t.jsx)(n.code,{children:"<input />"}),"s in the form, providing a handy way to use values from HTML form\nfields:"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"uppy.use(Form, { target: 'form#upload-form', getMetaFromForm: true });\nuppy.use(Transloadit, {\n\tfields: ['field_name', 'other_field_name'],\n\tparams: {\n\t\t/* ... */\n\t},\n});\n"})}),(0,t.jsxs)(n.p,{children:["Form fields can also be computed dynamically using custom logic, by using the\n",(0,t.jsx)(n.a,{href:"/docs/transloadit/#getAssemblyOptions-file",children:(0,t.jsx)(n.code,{children:"getAssemblyOptions(file)"})})," option."]})]}),"\n",(0,t.jsx)(n.h3,{id:"static-exports",children:"Static exports"}),"\n",(0,t.jsx)(n.h4,{id:"companion_url",children:(0,t.jsx)(n.code,{children:"COMPANION_URL"})}),"\n",(0,t.jsx)(n.p,{children:"The main endpoint for Transloadit\u2019s hosted companions. You can use this constant\nin remote provider options, like so:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"import Dropbox from '@uppy/dropbox';\nimport { COMPANION_URL } from '@uppy/transloadit';\n\nuppy.use(Dropbox, {\n\tcompanionUrl: COMPANION_URL,\n});\n"})}),"\n",(0,t.jsxs)(n.p,{children:["When using ",(0,t.jsx)(n.code,{children:"COMPANION_URL"}),", you should also configure\n",(0,t.jsx)(n.a,{href:"#companion_allowed_hosts",children:(0,t.jsx)(n.code,{children:"companionAllowedHosts"})}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["The value of this constant is ",(0,t.jsx)(n.code,{children:"https://api2.transloadit.com/companion"}),". If you\nare using a custom ",(0,t.jsx)(n.a,{href:"#service",children:(0,t.jsx)(n.code,{children:"service"})})," option, you should also set a custom\nhost option in your provider plugins, by taking a Transloadit API url and\nappending ",(0,t.jsx)(n.code,{children:"/companion"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"uppy.use(Dropbox, {\n\tcompanionUrl: 'https://api2-us-east-1.transloadit.com/companion',\n});\n"})}),"\n",(0,t.jsx)(n.h4,{id:"companion_allowed_hosts",children:(0,t.jsx)(n.code,{children:"COMPANION_ALLOWED_HOSTS"})}),"\n",(0,t.jsxs)(n.p,{children:["A RegExp pattern matching Transloadit\u2019s hosted companion endpoints. The pattern\nis used in remote provider ",(0,t.jsx)(n.code,{children:"companionAllowedHosts"})," options, to make sure that\nthird party authentication messages cannot be faked by an attacker\u2019s page but\ncan only originate from Transloadit\u2019s servers."]}),"\n",(0,t.jsxs)(n.p,{children:["Use it whenever you use ",(0,t.jsx)(n.code,{children:"companionUrl: COMPANION_URL"}),", like so:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"import Dropbox from '@uppy/dropbox';\nimport { COMPANION_ALLOWED_HOSTS } from '@uppy/transloadit';\n\nuppy.use(Dropbox, {\n\tcompanionAllowedHosts: COMPANION_ALLOWED_HOSTS,\n});\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The value of this constant covers ",(0,t.jsx)(n.em,{children:"all"})," Transloadit\u2019s Companion servers, so it\ndoes not need to be changed if you are using a custom ",(0,t.jsx)(n.a,{href:"#service",children:(0,t.jsx)(n.code,{children:"service"})}),"\noption. But, if you are not using the Transloadit Companion servers at\n",(0,t.jsx)(n.code,{children:"*.transloadit.com"}),", make sure to set the ",(0,t.jsx)(n.code,{children:"companionAllowedHosts"})," option to\nsomething that matches what you do use."]}),"\n",(0,t.jsx)(n.h3,{id:"events",children:"Events"}),"\n",(0,t.jsx)(n.h4,{id:"transloaditassembly-created",children:(0,t.jsx)(n.code,{children:"transloadit:assembly-created"})}),"\n",(0,t.jsx)(n.p,{children:"Fired when an Assembly is created."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"assembly"})," - The initial ",(0,t.jsx)(n.a,{href:"https://transloadit.com/docs/api/#assembly-status-response",children:"Assembly Status"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"fileIDs"})," - The IDs of the files that will be uploaded to this Assembly."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"uppy.on('transloadit:assembly-created', (assembly, fileIDs) => {\n\tconsole.group('Created', assembly.assembly_id, 'for files:');\n\tfor (const id of fileIDs) {\n\t\tconsole.log(uppy.getFile(id).name);\n\t}\n\tconsole.groupEnd();\n});\n"})}),"\n",(0,t.jsx)(n.h4,{id:"transloaditupload",children:(0,t.jsx)(n.code,{children:"transloadit:upload"})}),"\n",(0,t.jsxs)(n.p,{children:["Fired when Transloadit has received an upload. Requires\n",(0,t.jsx)(n.a,{href:"#waitformetadata",children:(0,t.jsx)(n.code,{children:"waitForMetadata"})})," to be set."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"file"})," - The Transloadit file object that was uploaded."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"assembly"})," - The ",(0,t.jsx)(n.a,{href:"https://transloadit.com/docs/api/#assembly-status-response",children:"Assembly Status"})," of the Assembly to which\nthe file was uploaded."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"transloaditassembly-executing",children:(0,t.jsx)(n.code,{children:"transloadit:assembly-executing"})}),"\n",(0,t.jsx)(n.p,{children:"Fired when Transloadit has received all uploads, and is executing the Assembly."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"assembly"})," - The\n",(0,t.jsx)(n.a,{href:"https://transloadit.com/docs/api/#assembly-status-response",children:"Assembly Status"}),"\nof the Assembly that is executing."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"transloaditresult",children:(0,t.jsx)(n.code,{children:"transloadit:result"})}),"\n",(0,t.jsxs)(n.p,{children:["Fired when a result came in from an Assembly. Requires\n",(0,t.jsx)(n.a,{href:"#waitforencoding",children:(0,t.jsx)(n.code,{children:"waitForEncoding"})})," to be set."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"stepName"})," - The name of the Assembly step that generated this result."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"result"})," - The result object from Transloadit. This result object has one more\nproperty, namely ",(0,t.jsx)(n.code,{children:"localId"}),". This is the ID of the file in Uppy\u2019s local state,\nand can be used with ",(0,t.jsx)(n.code,{children:"uppy.getFile(id)"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"assembly"})," - The ",(0,t.jsx)(n.a,{href:"https://transloadit.com/docs/api/#assembly-status-response",children:"Assembly Status"})," of the Assembly that\ngenerated this result."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"uppy.on('transloadit:result', (stepName, result) => {\n\tconst file = uppy.getFile(result.localId);\n\tdocument.body.appendChild(html`\n\t\t<div>\n\t\t\t<h2>From ${file.name}</h2>\n\t\t\t<a href=${result.ssl_url}> View </a>\n\t\t</div>\n\t`);\n});\n"})}),"\n",(0,t.jsx)(n.h4,{id:"transloaditcomplete",children:(0,t.jsx)(n.code,{children:"transloadit:complete"})}),"\n",(0,t.jsxs)(n.p,{children:["Fired when an Assembly completed. Requires ",(0,t.jsx)(n.a,{href:"#waitForEncoding",children:(0,t.jsx)(n.code,{children:"waitForEncoding"})}),"\nto be set."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"assembly"})," - The final ",(0,t.jsx)(n.a,{href:"https://transloadit.com/docs/api/#assembly-status-response",children:"Assembly Status"})," of the completed\nAssembly."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"uppy.on('transloadit:complete', (assembly) => {\n\t// Could do something fun with this!\n\tconsole.log(assembly.results);\n});\n"})}),"\n",(0,t.jsx)(n.h2,{id:"frequently-asked-questions",children:"Frequently Asked Questions"}),"\n",(0,t.jsx)(n.h3,{id:"accessing-the-assembly-when-an-error-occurred",children:"Accessing the assembly when an error occurred"}),"\n",(0,t.jsxs)(n.p,{children:["If an error occurs when an Assembly has already started, you can find the\nAssembly Status on the error object\u2019s ",(0,t.jsx)(n.code,{children:"assembly"})," property."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"uppy.on('error', (error) => {\n\tif (error.assembly) {\n\t\tconsole.log(`Assembly ID ${error.assembly.assembly_id} failed!`);\n\t\tconsole.log(error.assembly);\n\t}\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"assembly-behavior-when-uppy-is-closed",children:"Assembly behavior when Uppy is closed"}),"\n",(0,t.jsxs)(n.p,{children:["When integrating ",(0,t.jsx)(n.code,{children:"@uppy/transloadit"})," with ",(0,t.jsx)(n.code,{children:"@uppy/dashboard"}),", closing the\ndashboard will result in continuing assemblies on the server. When the user\nmanually cancels the upload any running assemblies will be cancelled."]})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},65171:(e,n,s)=>{s.d(n,{A:()=>d});var t=s(96540),o=s(21432),i=s(27293),a=s(4476),l=s(74848);const{rE:r}=a;function d(e){let{children:n,uppyCssName:s="uppy.min.css",uppyJsName:a="uppy.min.mjs"}=e,d=[];t.Children.toArray(n).forEach((e=>{d=[...d,...String(e).trim().split("\n").map((e=>e.trim()))]}));const c=d.map((e=>`  ${e}`)).join("\n"),h=`https://releases.transloadit.com/uppy/v${r}/${a}`,u=`\x3c!-- 1. Add CSS to \`<head>\` --\x3e\n<link href="https://releases.transloadit.com/uppy/v${r}/${s}" rel="stylesheet">\n\n\x3c!-- 2. Initialize --\x3e\n<div id="uppy"></div>\n\n<script type="module">\n${c.replace(/{{UPPY_JS_URL}}/g,h)}\n<\/script>\n`;return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(i.A,{type:"caution",children:[(0,l.jsx)("p",{children:"The bundle consists of most Uppy plugins, so this method is not recommended for production, as your users will have to download all plugins when you are likely using only a few."}),(0,l.jsx)("p",{children:"It can be useful to speed up your development environment, so don't hesitate to use it to get you started."})]}),(0,l.jsx)(o.A,{language:"html",children:u})]})}}}]);