"use strict";(self.webpackChunkuppy_io=self.webpackChunkuppy_io||[]).push([[9167],{82381:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>h,contentTitle:()=>c,default:()=>j,frontMatter:()=>t,metadata:()=>a,toc:()=>p});var s=l(74848),i=l(28453),d=l(11470),o=l(19365),r=l(65171);const t={sidebar_position:3,slug:"/uppy"},c="Uppy core",a={id:"uppy-core",title:"Uppy core",description:"Uppy can be an uploader and an interface with a lot of features. Features can be",source:"@site/docs/uppy-core.mdx",sourceDirName:".",slug:"/uppy",permalink:"/docs/uppy",draft:!1,unlisted:!1,editUrl:"https://github.com/transloadit/uppy/blob/main/docs/uppy-core.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,slug:"/uppy"},sidebar:"tutorialSidebar",previous:{title:"Migration guides",permalink:"/docs/guides/migration-guides"},next:{title:"Companion",permalink:"/docs/companion"}},h={},p=[{value:"When should I use it?",id:"when-should-i-use-it",level:2},{value:"Install",id:"install",level:2},{value:"Use",id:"use",level:2},{value:"Working with Uppy files",id:"working-with-uppy-files",level:3},{value:"<code>file.source</code>",id:"filesource",level:4},{value:"<code>file.id</code>",id:"fileid",level:4},{value:"<code>file.name</code>",id:"filename",level:4},{value:"<code>file.meta</code>",id:"filemeta",level:4},{value:"<code>file.type</code>",id:"filetype",level:4},{value:"<code>file.data</code>",id:"filedata",level:4},{value:"<code>file.progress</code>",id:"fileprogress",level:4},{value:"<code>file.size</code>",id:"filesize",level:4},{value:"<code>file.isRemote</code>",id:"fileisremote",level:4},{value:"<code>file.remote</code>",id:"fileremote",level:4},{value:"<code>file.preview</code>",id:"filepreview",level:4},{value:"<code>file.uploadURL</code>",id:"fileuploadurl",level:4},{value:"<code>new Uppy(options?)</code>",id:"new-uppyoptions",level:2},{value:"Options",id:"options",level:3},{value:"<code>id</code>",id:"id",level:4},{value:"<code>autoProceed</code>",id:"autoproceed",level:4},{value:"<code>allowMultipleUploadBatches</code>",id:"allowmultipleuploadbatches",level:4},{value:"<code>debug</code>",id:"debug",level:4},{value:"<code>logger</code>",id:"logger",level:4},{value:"<code>restrictions</code>",id:"restrictions",level:4},{value:"<code>meta</code>",id:"meta",level:4},{value:"<code>onBeforeFileAdded(file, files)</code>",id:"onbeforefileaddedfile-files",level:4},{value:"<code>onBeforeUpload(files)</code>",id:"onbeforeuploadfiles",level:4},{value:"<code>locale</code>",id:"locale",level:4},{value:"<code>store</code>",id:"store",level:4},{value:"<code>infoTimeout</code>",id:"infotimeout",level:4},{value:"Methods",id:"methods",level:3},{value:"<code>use(plugin, opts)</code>",id:"useplugin-opts",level:4},{value:"<code>removePlugin(instance)</code>",id:"removeplugininstance",level:4},{value:"<code>getPlugin(id)</code>",id:"getpluginid",level:4},{value:"<code>getID()</code>",id:"getid",level:4},{value:"<code>addFile(file)</code>",id:"addfilefile",level:4},{value:"<code>removeFile(fileID)</code>",id:"removefilefileid",level:4},{value:"<code>clear()</code>",id:"clear",level:4},{value:"<code>getFile(fileID)</code>",id:"getfilefileid",level:4},{value:"<code>getFiles()</code>",id:"getfiles",level:4},{value:"<code>upload()</code>",id:"upload",level:4},{value:"<code>pauseResume(fileID)</code>",id:"pauseresumefileid",level:4},{value:"<code>pauseAll()</code>",id:"pauseall",level:4},{value:"<code>resumeAll()</code>",id:"resumeall",level:4},{value:"<code>retryUpload(fileID)</code>",id:"retryuploadfileid",level:4},{value:"<code>retryAll()</code>",id:"retryall",level:4},{value:"<code>cancelAll()</code>",id:"cancelall",level:4},{value:"<code>setState(patch)</code>",id:"setstatepatch",level:4},{value:"<code>getState()</code>",id:"getstate",level:4},{value:"<code>setFileState(fileID, state)</code>",id:"setfilestatefileid-state",level:4},{value:"<code>setMeta(data)</code>",id:"setmetadata",level:4},{value:"<code>setFileMeta(fileID, data)</code>",id:"setfilemetafileid-data",level:4},{value:"<code>setOptions(opts)</code>",id:"setoptionsopts",level:4},{value:"<code>destroy()</code>",id:"destroy",level:4},{value:"<code>logout()</code>",id:"logout",level:4},{value:"<code>log(message, type)</code>",id:"logmessage-type",level:4},{value:"<code>info(message, type, duration)</code>",id:"infomessage-type-duration",level:4},{value:"<code>addPreProcessor(fn)</code>",id:"addpreprocessorfn",level:4},{value:"<code>addUploader(fn)</code>",id:"adduploaderfn",level:4},{value:"<code>addPostProcessor(fn)</code>",id:"addpostprocessorfn",level:4},{value:"<code>removePreProcessor/removeUploader/removePostProcessor(fn)</code>",id:"removepreprocessorremoveuploaderremovepostprocessorfn",level:4},{value:"<code>on(&#39;event&#39;, action)</code>",id:"onevent-action",level:4},{value:"<code>once(&#39;event&#39;, action)</code>",id:"onceevent-action",level:4},{value:"<code>off(&#39;event&#39;, action)</code>",id:"offevent-action",level:4},{value:"Events",id:"events",level:3},{value:"<code>file-added</code>",id:"file-added",level:4},{value:"<code>files-added</code>",id:"files-added",level:4},{value:"<code>file-removed</code>",id:"file-removed",level:4},{value:"<code>upload</code>",id:"upload-1",level:4},{value:"<code>preprocess-progress</code>",id:"preprocess-progress",level:4},{value:"<code>progress</code>",id:"progress",level:4},{value:"<code>upload-progress</code>",id:"upload-progress",level:4},{value:"<code>upload-pause</code>",id:"upload-pause",level:4},{value:"<code>postprocess-progress</code>",id:"postprocess-progress",level:4},{value:"<code>upload-success</code>",id:"upload-success",level:4},{value:"<code>complete</code>",id:"complete",level:4},{value:"<code>error</code>",id:"error",level:4},{value:"<code>upload-error</code>",id:"upload-error",level:4},{value:"<code>upload-retry</code>",id:"upload-retry",level:4},{value:"<code>upload-stalled</code>",id:"upload-stalled",level:4},{value:"<code>retry-all</code>",id:"retry-all",level:4},{value:"<code>info-visible</code>",id:"info-visible",level:4},{value:"<code>info-hidden</code>",id:"info-hidden",level:4},{value:"<code>cancel-all</code>",id:"cancel-all",level:4},{value:"<code>restriction-failed</code>",id:"restriction-failed",level:4},{value:"<code>new BasePlugin(uppy, options?)</code>",id:"new-basepluginuppy-options",level:2},{value:"Options",id:"options-1",level:3},{value:"Methods",id:"methods-1",level:3},{value:"<code>setOptions(options)</code>",id:"setoptionsoptions",level:4},{value:"<code>getPluginState()</code>",id:"getpluginstate",level:4},{value:"<code>setPluginState()</code>",id:"setpluginstate",level:4},{value:"<code>install()</code>",id:"install-1",level:4},{value:"<code>uninstall()</code>",id:"uninstall",level:4},{value:"<code>i18nInit</code>",id:"i18ninit",level:4},{value:"<code>addTarget</code>",id:"addtarget",level:4},{value:"<code>update</code>",id:"update",level:4},{value:"<code>afterUpdate</code>",id:"afterupdate",level:4},{value:"<code>new UIPlugin(uppy, options?)</code>",id:"new-uipluginuppy-options",level:2},{value:"Options",id:"options-2",level:3},{value:"Methods",id:"methods-2",level:3},{value:"<code>mount(target)</code>",id:"mounttarget",level:4},{value:"<code>onMount()</code>",id:"onmount",level:4},{value:"<code>unmount</code>",id:"unmount",level:4},{value:"<code>onUnmount()</code>",id:"onunmount",level:4},{value:"<code>render()</code>",id:"render",level:4},{value:"<code>update(state)</code>",id:"updatestate",level:4},{value:"<code>debugLogger()</code>",id:"debuglogger",level:2},{value:"Frequently asked questions",id:"frequently-asked-questions",level:2},{value:"How do I allow duplicate files?",id:"how-do-i-allow-duplicate-files",level:3}];function u(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components},{Details:l}=n;return l||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"uppy-core",children:"Uppy core"}),"\n",(0,s.jsxs)(n.p,{children:["Uppy can be an uploader and an interface with a lot of features. Features can be\nadded incrementally with plugins, but Uppy can be as bare bones as you want it\nto be. So we build Uppy\u2019s heart, ",(0,s.jsx)(n.code,{children:"@uppy/core"}),", as a standalone orchestrator. It\nacts as a state manager, event emitter, and restrictions handler."]}),"\n",(0,s.jsx)(n.h2,{id:"when-should-i-use-it",children:"When should I use it?"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"@uppy/core"})," is the fundament of the Uppy ecosystem, the orchestrator for all\nadded plugins. No matter the uploading experience you\u2019re looking for, it all\nstarts with installing this plugin."]}),"\n",(0,s.jsxs)(n.p,{children:["You can use ",(0,s.jsx)(n.code,{children:"@uppy/core"})," and\n",(0,s.jsx)(n.a,{href:"/docs/guides/building-your-own-ui-with-uppy",children:"build your own UI"})," or go for the\n",(0,s.jsx)(n.a,{href:"/docs/dashboard",children:"Dashboard"})," integration. For an uploading plugin, you can refer\nto ",(0,s.jsx)(n.a,{href:"/docs/guides/choosing-uploader",children:"choosing the uploader you need"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["If you want to see how it all comes together, checkout the\n",(0,s.jsx)(n.a,{href:"/examples",children:"examples"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"install",children:"Install"}),"\n",(0,s.jsxs)(d.A,{children:[(0,s.jsx)(o.A,{value:"npm",label:"NPM",default:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"npm install @uppy/core\n"})})}),(0,s.jsx)(o.A,{value:"yarn",label:"Yarn",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:"yarn add @uppy/core\n"})})}),(0,s.jsx)(o.A,{value:"cdn",label:"CDN",children:(0,s.jsx)(r.A,{children:'\n        import { Uppy } from "{{UPPY_JS_URL}}"\n        const uppy = new Uppy()\n      '})})]}),"\n",(0,s.jsx)(n.h2,{id:"use",children:"Use"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"@uppy/core"})," has four exports: ",(0,s.jsx)(n.code,{children:"Uppy"}),", ",(0,s.jsx)(n.code,{children:"UIPlugin"}),", ",(0,s.jsx)(n.code,{children:"BasePlugin"}),", and\n",(0,s.jsx)(n.code,{children:"debugLogger"}),". The default export is the ",(0,s.jsx)(n.code,{children:"Uppy"})," class."]}),"\n",(0,s.jsx)(n.h3,{id:"working-with-uppy-files",children:"Working with Uppy files"}),"\n",(0,s.jsxs)(n.p,{children:["Uppy keeps files in state with the ",(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/File",children:(0,s.jsx)(n.code,{children:"File"})})," browser API, but it\u2019s wrapped in\nan ",(0,s.jsx)(n.code,{children:"Object"})," to be able to add more data to it, which we call an ",(0,s.jsx)(n.em,{children:"Uppy file"}),". All\nthese properties can be useful for plugins and side-effects (such as\n",(0,s.jsx)(n.a,{href:"#events",children:"events"}),")."]}),"\n",(0,s.jsxs)(n.p,{children:["Mutating these properties should be done through ",(0,s.jsx)(n.a,{href:"#methods",children:"methods"}),"."]}),"\n",(0,s.jsxs)(l,{children:[(0,s.jsx)("summary",{children:"Uppy file properties"}),(0,s.jsx)(n.h4,{id:"filesource",children:(0,s.jsx)(n.code,{children:"file.source"})}),(0,s.jsxs)(n.p,{children:["Name of the plugin that was responsible for adding this file. Typically a remote\nprovider plugin like ",(0,s.jsx)(n.code,{children:"'GoogleDrive'"})," or a UI plugin like ",(0,s.jsx)(n.code,{children:"'DragDrop'"}),"."]}),(0,s.jsx)(n.h4,{id:"fileid",children:(0,s.jsx)(n.code,{children:"file.id"})}),(0,s.jsx)(n.p,{children:"Unique ID for the file."}),(0,s.jsx)(n.h4,{id:"filename",children:(0,s.jsx)(n.code,{children:"file.name"})}),(0,s.jsx)(n.p,{children:"The name of the file."}),(0,s.jsx)(n.h4,{id:"filemeta",children:(0,s.jsx)(n.code,{children:"file.meta"})}),(0,s.jsx)(n.p,{children:"Object containing standard as well as user-defined metadata for each file. Any\ncustom file metadata should be JSON-serializable. The following standard\nmetadata will be stored on all file objects, but plugins may add more metadata."}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"file.meta.name"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Same as ",(0,s.jsx)(n.code,{children:"file.name"}),"."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"file.meta.type"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Same as ",(0,s.jsx)(n.code,{children:"file.type"}),"."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"file.meta.relativePath"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["For any local folder that was drag-dropped or opened in Uppy, the files\ninside the folder will have the ",(0,s.jsx)(n.code,{children:"relativePath"})," metadata field set to their\npath, relative to the folder. ",(0,s.jsx)(n.code,{children:"relativePath"})," begins with the folder\u2019s name\nand ends with the file\u2019s name. If opening or drag-dropping a file instead of\na folder, ",(0,s.jsx)(n.code,{children:"relativePath"})," will be ",(0,s.jsx)(n.code,{children:"null"}),". The same behaviour exists for\nremote (provider) files, but the path will instead be relative to the user\u2019s\nselection (checkboxes). No leading or trailing slashes."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Local file example:"})," When drag-dropping a local folder ",(0,s.jsx)(n.code,{children:"folder1"})," which\nhas a folder inside of it named ",(0,s.jsx)(n.code,{children:"folder2"})," which has a file named ",(0,s.jsx)(n.code,{children:"file"}),"\ninside of it, the ",(0,s.jsx)(n.code,{children:"relativePath"})," meta field of the file will be\n",(0,s.jsx)(n.code,{children:"folder1/folder2/file"}),". However if drag-dropping or opening ",(0,s.jsx)(n.code,{children:"file"})," directly,\n",(0,s.jsx)(n.code,{children:"relativePath"})," will be ",(0,s.jsx)(n.code,{children:"null"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Remote file example:"})," Suppose we have a remote provider folder structure\nsuch as ",(0,s.jsx)(n.code,{children:"/folder1/folder2/file"}),". Then, if the user checks the checkbox next\nto ",(0,s.jsx)(n.code,{children:"folder1"}),", ",(0,s.jsx)(n.code,{children:"file"}),"\u2019s ",(0,s.jsx)(n.code,{children:"relativePath"})," will be ",(0,s.jsx)(n.code,{children:'"folder1/folder2/file"'}),".\nHowever if the user first navigates into ",(0,s.jsx)(n.code,{children:"folder1"}),", and only then checks the\ncheckbox next to ",(0,s.jsx)(n.code,{children:"folder2"}),", ",(0,s.jsx)(n.code,{children:"relativePath"})," will be ",(0,s.jsx)(n.code,{children:'"folder2/file"'}),"."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"file.meta.absolutePath"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"absolutePath"})," meta field will only be set for remote files. Regardless\nof user selection, it will always be the path relative to the root of the\nprovider\u2019s list of files, as presented to the user. ",(0,s.jsx)(n.code,{children:"absolutePath"})," always\nbegins with a ",(0,s.jsx)(n.code,{children:"/"})," and will always end with the file\u2019s name. To clarify: The\ndifference between ",(0,s.jsx)(n.code,{children:"absolutePath"})," and ",(0,s.jsx)(n.code,{children:"relativePath"})," is that ",(0,s.jsx)(n.code,{children:"absolutePath"}),"\nonly exists for remote files, and always has the full path to the file,\nwhile ",(0,s.jsx)(n.code,{children:"relativePath"})," is the file\u2019s path ",(0,s.jsx)(n.em,{children:"relative to the user\u2019s selected\nfolder"}),"."]}),"\n"]}),"\n"]}),"\n"]}),(0,s.jsx)(n.h4,{id:"filetype",children:(0,s.jsx)(n.code,{children:"file.type"})}),(0,s.jsx)(n.p,{children:"MIME type of the file. This may actually be guessed if a file type was not\nprovided by the user\u2019s browser, so this is a best-effort value and not\nguaranteed to be correct."}),(0,s.jsx)(n.h4,{id:"filedata",children:(0,s.jsx)(n.code,{children:"file.data"})}),(0,s.jsxs)(n.p,{children:["For local files, this is the actual ",(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/File",children:(0,s.jsx)(n.code,{children:"File"})})," or ",(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Blob",children:(0,s.jsx)(n.code,{children:"Blob"})})," object representing\nthe file contents."]}),(0,s.jsx)(n.p,{children:"For files that are imported from remote providers, the file data is not\navailable in the browser."}),(0,s.jsx)(n.h4,{id:"fileprogress",children:(0,s.jsx)(n.code,{children:"file.progress"})}),(0,s.jsx)(n.p,{children:"An object with upload progress data."}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Properties"})}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"bytesUploaded"})," - Number of bytes uploaded so far."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"bytesTotal"})," - Number of bytes that must be uploaded in total."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"uploadStarted"})," - Null if the upload has not started yet. Once started, this\nproperty stores a UNIX timestamp. Note that this is only set ",(0,s.jsx)(n.em,{children:"after"}),"\npreprocessing."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"uploadComplete"})," - Boolean indicating if the upload has completed. Note this\ndoes ",(0,s.jsx)(n.em,{children:"not"})," mean that postprocessing has completed, too."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"percentage"})," - Integer percentage between 0 and 100."]}),"\n"]}),(0,s.jsx)(n.h4,{id:"filesize",children:(0,s.jsx)(n.code,{children:"file.size"})}),(0,s.jsx)(n.p,{children:"Size in bytes of the file."}),(0,s.jsx)(n.h4,{id:"fileisremote",children:(0,s.jsx)(n.code,{children:"file.isRemote"})}),(0,s.jsx)(n.p,{children:"Boolean: is this file imported from a remote provider?"}),(0,s.jsx)(n.h4,{id:"fileremote",children:(0,s.jsx)(n.code,{children:"file.remote"})}),(0,s.jsx)(n.p,{children:"Grab bag of data for remote providers. Generally not interesting for end users."}),(0,s.jsx)(n.h4,{id:"filepreview",children:(0,s.jsx)(n.code,{children:"file.preview"})}),(0,s.jsx)(n.p,{children:"An optional URL to a visual thumbnail for the file."}),(0,s.jsx)(n.h4,{id:"fileuploadurl",children:(0,s.jsx)(n.code,{children:"file.uploadURL"})}),(0,s.jsx)(n.p,{children:"When an upload is completed, this may contain a URL to the uploaded file.\nDepending on server configuration it may not be accessible or correct."})]}),"\n",(0,s.jsx)(n.h2,{id:"new-uppyoptions",children:(0,s.jsx)(n.code,{children:"new Uppy(options?)"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"import Uppy from '@uppy/core';\n\nconst uppy = new Uppy();\n"})}),"\n",(0,s.jsx)(n.h3,{id:"options",children:"Options"}),"\n",(0,s.jsx)(n.h4,{id:"id",children:(0,s.jsx)(n.code,{children:"id"})}),"\n",(0,s.jsxs)(n.p,{children:["A site-wide unique ID for the instance (",(0,s.jsx)(n.code,{children:"string"}),", default: ",(0,s.jsx)(n.code,{children:"uppy"}),")."]}),"\n",(0,s.jsxs)(n.admonition,{type:"note",children:[(0,s.jsxs)(n.p,{children:["If several Uppy instances are being used, for instance, on two different pages,\nan ",(0,s.jsx)(n.code,{children:"id"})," should be specified. This allows Uppy to store information in\n",(0,s.jsx)(n.code,{children:"localStorage"})," without colliding with other Uppy instances."]}),(0,s.jsx)(n.p,{children:"This ID should be persistent across page reloads and navigation\u2014it shouldn\u2019t be\na random number that is different every time Uppy is loaded."})]}),"\n",(0,s.jsx)(n.h4,{id:"autoproceed",children:(0,s.jsx)(n.code,{children:"autoProceed"})}),"\n",(0,s.jsxs)(n.p,{children:["Upload as soon as files are added (",(0,s.jsx)(n.code,{children:"boolean"}),", default: ",(0,s.jsx)(n.code,{children:"false"}),")."]}),"\n",(0,s.jsxs)(n.p,{children:["By default Uppy will wait for an upload button to be pressed in the UI, or the\n",(0,s.jsx)(n.code,{children:".upload()"})," method to be called before starting an upload. Setting this to\n",(0,s.jsx)(n.code,{children:"true"})," will start uploading automatically after the first file is selected"]}),"\n",(0,s.jsx)(n.h4,{id:"allowmultipleuploadbatches",children:(0,s.jsx)(n.code,{children:"allowMultipleUploadBatches"})}),"\n",(0,s.jsxs)(n.p,{children:["Whether to allow several upload batches (",(0,s.jsx)(n.code,{children:"boolean"}),", default: ",(0,s.jsx)(n.code,{children:"true"}),")."]}),"\n",(0,s.jsxs)(n.p,{children:["This means several calls to ",(0,s.jsx)(n.code,{children:".upload()"}),", or a user adding more files after\nalready uploading some. An upload batch is made up of the files that were added\nsince the earlier ",(0,s.jsx)(n.code,{children:".upload()"})," call."]}),"\n",(0,s.jsxs)(n.p,{children:["With this option set to ",(0,s.jsx)(n.code,{children:"true"}),", users can upload some files, and then add ",(0,s.jsx)(n.em,{children:"more"}),"\nfiles and upload those as well. A model use case for this is uploading images to\na gallery or adding attachments to an email."]}),"\n",(0,s.jsxs)(n.p,{children:["With this option set to ",(0,s.jsx)(n.code,{children:"false"}),", users can upload some files, and you can listen\nfor the ",(0,s.jsx)(n.a,{href:"#complete",children:(0,s.jsx)(n.code,{children:"'complete'"})})," event to continue to the next step in your\napp\u2019s upload flow. A typical use case for this is uploading a new profile\npicture. If you are integrating with an existing HTML form, this option gives\nthe closest behaviour to a bare ",(0,s.jsx)(n.code,{children:'<input type="file">'}),"."]}),"\n",(0,s.jsx)(n.h4,{id:"debug",children:(0,s.jsx)(n.code,{children:"debug"})}),"\n",(0,s.jsxs)(n.p,{children:["Whether to send debugging and warning logs (",(0,s.jsx)(n.code,{children:"boolean"}),", default: ",(0,s.jsx)(n.code,{children:"false"}),")."]}),"\n",(0,s.jsxs)(n.p,{children:["Setting this to ",(0,s.jsx)(n.code,{children:"true"})," sets the ",(0,s.jsx)(n.a,{href:"#logger",children:(0,s.jsx)(n.code,{children:"logger"})})," to\n",(0,s.jsx)(n.a,{href:"#debuglogger",children:(0,s.jsx)(n.code,{children:"debugLogger"})}),"."]}),"\n",(0,s.jsx)(n.h4,{id:"logger",children:(0,s.jsx)(n.code,{children:"logger"})}),"\n",(0,s.jsxs)(n.p,{children:["Logger used for ",(0,s.jsx)(n.a,{href:"#logmessage-type",children:(0,s.jsx)(n.code,{children:"uppy.log"})})," (",(0,s.jsx)(n.code,{children:"Object"}),", default:\n",(0,s.jsx)(n.code,{children:"justErrorsLogger"}),")."]}),"\n",(0,s.jsxs)(n.p,{children:["By providing your own ",(0,s.jsx)(n.code,{children:"logger"}),", you can send the debug information to a server,\nchoose to log errors only, etc."]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["Set ",(0,s.jsx)(n.code,{children:"logger"})," to ",(0,s.jsx)(n.a,{href:"#debuglogger",children:(0,s.jsx)(n.code,{children:"debugLogger"})})," to get debug info output to the\nbrowser console:"]})}),"\n",(0,s.jsxs)(n.admonition,{type:"note",children:[(0,s.jsxs)(n.p,{children:["You can also provide your own logger object: it should expose ",(0,s.jsx)(n.code,{children:"debug"}),", ",(0,s.jsx)(n.code,{children:"warn"}),"\nand ",(0,s.jsx)(n.code,{children:"error"})," methods, as shown in the examples below."]}),(0,s.jsxs)(n.p,{children:["Here\u2019s an example of a ",(0,s.jsx)(n.code,{children:"logger"})," that does nothing:"]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const nullLogger = {\n\tdebug: (...args) => {},\n\twarn: (...args) => {},\n\terror: (...args) => {},\n};\n"})})]}),"\n",(0,s.jsx)(n.h4,{id:"restrictions",children:(0,s.jsx)(n.code,{children:"restrictions"})}),"\n",(0,s.jsxs)(n.p,{children:["Conditions for restricting an upload (",(0,s.jsx)(n.code,{children:"Object"}),", default: ",(0,s.jsx)(n.code,{children:"{}"}),")."]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Property"}),(0,s.jsx)(n.th,{children:"Value"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"maxFileSize"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"number"})}),(0,s.jsx)(n.td,{children:"maximum file size in bytes for each individual file"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"minFileSize"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"number"})}),(0,s.jsx)(n.td,{children:"minimum file size in bytes for each individual file"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"maxTotalFileSize"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"number"})}),(0,s.jsx)(n.td,{children:"maximum file size in bytes for all the files that can be selected for upload"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"maxNumberOfFiles"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"number"})}),(0,s.jsx)(n.td,{children:"total number of files that can be selected"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"minNumberOfFiles"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"number"})}),(0,s.jsx)(n.td,{children:"minimum number of files that must be selected before the upload"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"allowedFileTypes"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Array"})}),(0,s.jsxs)(n.td,{children:["wildcards ",(0,s.jsx)(n.code,{children:"image/*"}),", or exact mime types ",(0,s.jsx)(n.code,{children:"image/jpeg"}),", or file extensions ",(0,s.jsx)(n.code,{children:".jpg"}),": ",(0,s.jsx)(n.code,{children:"['image/*', '.jpg', '.jpeg', '.png', '.gif']"})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"requiredMetaFields"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Array<string>"})}),(0,s.jsxs)(n.td,{children:["make keys from the ",(0,s.jsx)(n.code,{children:"meta"})," object in every file required before uploading"]})]})]})]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"maxNumberOfFiles"})," also affects the number of files a user is able to select via\nthe system file dialog in UI plugins like ",(0,s.jsx)(n.code,{children:"DragDrop"}),", ",(0,s.jsx)(n.code,{children:"FileInput"})," and\n",(0,s.jsx)(n.code,{children:"Dashboard"}),". When set to ",(0,s.jsx)(n.code,{children:"1"}),", they will only be able to select a single file.\nWhen ",(0,s.jsx)(n.code,{children:"null"})," or another number is provided, they will be able to select several\nfiles."]})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"allowedFileTypes"})," gets passed to the file system dialog via the\n",(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#Limiting_accepted_file_types",children:(0,s.jsx)(n.code,{children:"<input>"})}),"\naccept attribute, so only types supported by the browser will work."]})}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["If you\u2019d like to force a certain meta field data to be entered before the\nupload, you can\n",(0,s.jsxs)(n.a,{href:"https://github.com/transloadit/uppy/issues/1703#issuecomment-507202561",children:["do so using ",(0,s.jsx)(n.code,{children:"onBeforeUpload"})]}),"."]})}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["If you need to restrict ",(0,s.jsx)(n.code,{children:"allowedFileTypes"})," to a file extension with double dots,\nlike ",(0,s.jsx)(n.code,{children:".nii.gz"}),", you can do so by\n",(0,s.jsxs)(n.a,{href:"https://github.com/transloadit/uppy/issues/1822#issuecomment-526801208",children:["setting ",(0,s.jsx)(n.code,{children:"allowedFileTypes"})," to the last part of the extension, ",(0,s.jsx)(n.code,{children:"allowedFileTypes: ['.gz']"}),", and then using ",(0,s.jsx)(n.code,{children:"onBeforeFileAdded"})," to filter for ",(0,s.jsx)(n.code,{children:".nii.gz"})]}),"."]})}),"\n",(0,s.jsx)(n.h4,{id:"meta",children:(0,s.jsx)(n.code,{children:"meta"})}),"\n",(0,s.jsxs)(n.p,{children:["Key/value pairs to add to each file\u2019s ",(0,s.jsx)(n.code,{children:"metadata"})," (",(0,s.jsx)(n.code,{children:"Object"}),", default: ",(0,s.jsx)(n.code,{children:"{}"}),")."]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["Metadata from each file is then attached to uploads in the ",(0,s.jsx)(n.a,{href:"/docs/tus",children:"Tus"})," and\n",(0,s.jsx)(n.a,{href:"/docs/xhr-upload",children:"XHR"})," plugins."]})}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["Two methods also exist for updating ",(0,s.jsx)(n.code,{children:"metadata"}),": ",(0,s.jsx)(n.a,{href:"#setmetadata",children:(0,s.jsx)(n.code,{children:"setMeta"})})," and\n",(0,s.jsx)(n.a,{href:"#setfilemetafileid-data",children:(0,s.jsx)(n.code,{children:"setFileMeta"})}),"."]})}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["Metadata can also be added from a ",(0,s.jsx)(n.code,{children:"<form>"})," element on your page, through the\n",(0,s.jsx)(n.a,{href:"#",children:"Form"})," plugin or through the UI if you are using Dashboard with the\n",(0,s.jsx)(n.a,{href:"/docs/dashboard#metafields",children:(0,s.jsx)(n.code,{children:"metaFields"})})," option."]})}),"\n",(0,s.jsx)("i",{id:"onBeforeFileAdded"}),"\n",(0,s.jsx)(n.h4,{id:"onbeforefileaddedfile-files",children:(0,s.jsx)(n.code,{children:"onBeforeFileAdded(file, files)"})}),"\n",(0,s.jsxs)(n.p,{children:["A function called before a file is added to Uppy (",(0,s.jsx)(n.code,{children:"Function"}),", default:\n",(0,s.jsx)(n.code,{children:"(files, file) => !Object.hasOwn(files, file.id)"}),")."]}),"\n",(0,s.jsx)(n.p,{children:"Use this function to run any number of custom checks on the selected file, or\nmanipulate it, for instance, by optimizing a file name. You can also allow\nduplicate files with this."}),"\n",(0,s.jsxs)(n.p,{children:["You can return ",(0,s.jsx)(n.code,{children:"true"})," to keep the file as is, ",(0,s.jsx)(n.code,{children:"false"})," to remove the file, or\nreturn a modified file."]}),"\n",(0,s.jsx)(n.admonition,{type:"caution",children:(0,s.jsxs)(n.p,{children:["This method is intended for quick synchronous checks and modifications only. If\nyou need to do an async API call, or heavy work on a file (like compression or\nencryption), you should use a ",(0,s.jsx)(n.a,{href:"/docs/guides/building-plugins",children:"custom plugin"}),"\ninstead."]})}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["No notification will be shown to the user about a file not passing validation by\ndefault. We recommend showing a message using\n",(0,s.jsx)(n.a,{href:"#infomessage-type-duration",children:(0,s.jsx)(n.code,{children:"uppy.info()"})})," and logging to console for debugging\npurposes via ",(0,s.jsx)(n.a,{href:"#logmessage-type",children:(0,s.jsx)(n.code,{children:"uppy.log()"})}),"."]})}),"\n",(0,s.jsxs)(l,{children:[(0,s.jsx)("summary",{children:"Filter, change, and abort example"}),(0,s.jsx)(n.p,{children:"Allow all files, also duplicate files. This will replace the file if it has not\nbeen uploaded. If you upload a duplicate file again it depends on your upload\nplugin and backend how it is handled."}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const uppy = new Uppy({\n  // ...\n  onBeforeFileAdded: () => true,\n"})}),(0,s.jsx)(n.p,{children:"Keep only files under a condition:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const uppy = new Uppy({\n  // ...\n  onBeforeFileAdded: (currentFile, files) => {\n    if (currentFile.name === 'forest-IMG_0616.jpg') {\n      return true\n    }\n    return false\n  },\n"})}),(0,s.jsx)(n.p,{children:"Change all file names:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const uppy = new Uppy({\n  // ...\n  onBeforeFileAdded: (currentFile, files) => {\n    const modifiedFile = {\n      ...currentFile,\n      name: `${currentFile.name}__${Date.now()}`,\n    }\n    return modifiedFile\n  },\n"})}),(0,s.jsx)(n.p,{children:"Abort a file:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const uppy = new Uppy({\n\t// ...\n\tonBeforeFileAdded: (currentFile, files) => {\n\t\tif (!currentFile.type) {\n\t\t\t// log to console\n\t\t\tuppy.log(`Skipping file because it has no type`);\n\t\t\t// show error message to the user\n\t\t\tuppy.info(`Skipping file because it has no type`, 'error', 500);\n\t\t\treturn false;\n\t\t}\n\t},\n});\n"})})]}),"\n",(0,s.jsx)(n.h4,{id:"onbeforeuploadfiles",children:(0,s.jsx)(n.code,{children:"onBeforeUpload(files)"})}),"\n",(0,s.jsxs)(n.p,{children:["A function called before when upload is initiated (",(0,s.jsx)(n.code,{children:"Function"}),", default:\n",(0,s.jsx)(n.code,{children:"(files) => files"}),")."]}),"\n",(0,s.jsx)(n.p,{children:"Use this to check if all files or their total number match your requirements, or\nmanipulate all the files at once before upload."}),"\n",(0,s.jsxs)(n.p,{children:["You can return ",(0,s.jsx)(n.code,{children:"true"})," to continue the upload, ",(0,s.jsx)(n.code,{children:"false"})," to cancel it, or return\nmodified files."]}),"\n",(0,s.jsx)(n.admonition,{type:"caution",children:(0,s.jsxs)(n.p,{children:["This method is intended for quick synchronous checks and modifications only. If\nyou need to do an async API call, or heavy work on a file (like compression or\nencryption), you should use a ",(0,s.jsx)(n.a,{href:"/docs/guides/building-plugins",children:"custom plugin"}),"\ninstead."]})}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["No notification will be shown to the user about a file not passing validation by\ndefault. We recommend showing a message using\n",(0,s.jsx)(n.a,{href:"#infomessage-type-duration",children:(0,s.jsx)(n.code,{children:"uppy.info()"})})," and logging to console for debugging\npurposes via ",(0,s.jsx)(n.a,{href:"#logmessage-type",children:(0,s.jsx)(n.code,{children:"uppy.log()"})}),"."]})}),"\n",(0,s.jsxs)(l,{children:[(0,s.jsx)("summary",{children:"Change and abort example"}),(0,s.jsx)(n.p,{children:"Change all file names:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const uppy = new Uppy({\n\t// ...\n\tonBeforeUpload: (files) => {\n\t\t// We\u2019ll be careful to return a new object, not mutating the original `files`\n\t\tconst updatedFiles = {};\n\t\tObject.keys(files).forEach((fileID) => {\n\t\t\tupdatedFiles[fileID] = {\n\t\t\t\t...files[fileID],\n\t\t\t\tname: `${myCustomPrefix}__${files[fileID].name}`,\n\t\t\t};\n\t\t});\n\t\treturn updatedFiles;\n\t},\n});\n"})}),(0,s.jsx)(n.p,{children:"Abort an upload:"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const uppy = new Uppy({\n\t// ...\n\tonBeforeUpload: (files) => {\n\t\tif (Object.keys(files).length < 2) {\n\t\t\t// log to console\n\t\t\tuppy.log(\n\t\t\t\t`Aborting upload because only ${\n\t\t\t\t\tObject.keys(files).length\n\t\t\t\t} files were selected`,\n\t\t\t);\n\t\t\t// show error message to the user\n\t\t\tuppy.info(`You have to select at least 2 files`, 'error', 500);\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t},\n});\n"})})]}),"\n",(0,s.jsx)(n.h4,{id:"locale",children:(0,s.jsx)(n.code,{children:"locale"})}),"\n",(0,s.jsxs)(n.p,{children:["You can override locale strings by passing the ",(0,s.jsx)(n.code,{children:"strings"})," object with the keys\nyou want to override."]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"Array indexed objects are used for pluralisation."})}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["If you want a different language it\u2019s better to use ",(0,s.jsx)(n.a,{href:"/docs/locales",children:"locales"}),"."]})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"module.exports = {\n\tstrings: {\n\t\taddBulkFilesFailed: {\n\t\t\t0: 'Failed to add %{smart_count} file due to an internal error',\n\t\t\t1: 'Failed to add %{smart_count} files due to internal errors',\n\t\t},\n\t\tyouCanOnlyUploadX: {\n\t\t\t0: 'You can only upload %{smart_count} file',\n\t\t\t1: 'You can only upload %{smart_count} files',\n\t\t},\n\t\tyouHaveToAtLeastSelectX: {\n\t\t\t0: 'You have to select at least %{smart_count} file',\n\t\t\t1: 'You have to select at least %{smart_count} files',\n\t\t},\n\t\texceedsSize: '%{file} exceeds maximum allowed size of %{size}',\n\t\tmissingRequiredMetaField: 'Missing required meta fields',\n\t\tmissingRequiredMetaFieldOnFile:\n\t\t\t'Missing required meta fields in %{fileName}',\n\t\tinferiorSize: 'This file is smaller than the allowed size of %{size}',\n\t\tyouCanOnlyUploadFileTypes: 'You can only upload: %{types}',\n\t\tnoMoreFilesAllowed: 'Cannot add more files',\n\t\tnoDuplicates:\n\t\t\t\"Cannot add the duplicate file '%{fileName}', it already exists\",\n\t\tcompanionError: 'Connection with Companion failed',\n\t\tauthAborted: 'Authentication aborted',\n\t\tcompanionUnauthorizeHint:\n\t\t\t'To unauthorize to your %{provider} account, please go to %{url}',\n\t\tfailedToUpload: 'Failed to upload %{file}',\n\t\tnoInternetConnection: 'No Internet connection',\n\t\tconnectedToInternet: 'Connected to the Internet',\n\t\t// Strings for remote providers\n\t\tnoFilesFound: 'You have no files or folders here',\n\t\tselectX: {\n\t\t\t0: 'Select %{smart_count}',\n\t\t\t1: 'Select %{smart_count}',\n\t\t},\n\t\tallFilesFromFolderNamed: 'All files from folder %{name}',\n\t\topenFolderNamed: 'Open folder %{name}',\n\t\tcancel: 'Cancel',\n\t\tlogOut: 'Log out',\n\t\tfilter: 'Filter',\n\t\tresetFilter: 'Reset filter',\n\t\tloading: 'Loading...',\n\t\tauthenticateWithTitle:\n\t\t\t'Please authenticate with %{pluginName} to select files',\n\t\tauthenticateWith: 'Connect to %{pluginName}',\n\t\tsignInWithGoogle: 'Sign in with Google',\n\t\tsearchImages: 'Search for images',\n\t\tenterTextToSearch: 'Enter text to search for images',\n\t\tsearch: 'Search',\n\t\temptyFolderAdded: 'No files were added from empty folder',\n\t\tfolderAlreadyAdded: 'The folder \"%{folder}\" was already added',\n\t\tfolderAdded: {\n\t\t\t0: 'Added %{smart_count} file from %{folder}',\n\t\t\t1: 'Added %{smart_count} files from %{folder}',\n\t\t},\n\t},\n};\n"})}),"\n",(0,s.jsx)(n.h4,{id:"store",children:(0,s.jsx)(n.code,{children:"store"})}),"\n",(0,s.jsxs)(n.p,{children:["The store that is used to keep track of internal state (",(0,s.jsx)(n.code,{children:"Object"}),", default:\n",(0,s.jsx)(n.a,{href:"/docs/guides/custom-stores",children:(0,s.jsx)(n.code,{children:"DefaultStore"})}),")."]}),"\n",(0,s.jsxs)(n.p,{children:["This option can be used to plug Uppy state into an external state management\nlibrary, such as ",(0,s.jsx)(n.a,{href:"/docs/guides/custom-stores",children:"Redux"}),"."]}),"\n","\n",(0,s.jsx)(n.h4,{id:"infotimeout",children:(0,s.jsx)(n.code,{children:"infoTimeout"})}),"\n",(0,s.jsxs)(n.p,{children:["How long an ",(0,s.jsx)(n.a,{href:"/docs/informer",children:"Informer"})," notification will be visible (",(0,s.jsx)(n.code,{children:"number"}),",\ndefault: ",(0,s.jsx)(n.code,{children:"5000"}),")."]}),"\n",(0,s.jsx)(n.h3,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(n.h4,{id:"useplugin-opts",children:(0,s.jsx)(n.code,{children:"use(plugin, opts)"})}),"\n",(0,s.jsx)(n.p,{children:"Add a plugin to Uppy, with an optional plugin options object."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"import Uppy from '@uppy/core';\nimport DragDrop from '@uppy/drag-drop';\n\nconst uppy = new Uppy();\nuppy.use(DragDrop, { target: 'body' });\n"})}),"\n",(0,s.jsx)(n.h4,{id:"removeplugininstance",children:(0,s.jsx)(n.code,{children:"removePlugin(instance)"})}),"\n",(0,s.jsx)(n.p,{children:"Uninstall and remove a plugin."}),"\n",(0,s.jsx)(n.h4,{id:"getpluginid",children:(0,s.jsx)(n.code,{children:"getPlugin(id)"})}),"\n",(0,s.jsxs)(n.p,{children:["Get a plugin by its ",(0,s.jsx)(n.code,{children:"id"})," to access its methods."]}),"\n",(0,s.jsx)(n.h4,{id:"getid",children:(0,s.jsx)(n.code,{children:"getID()"})}),"\n",(0,s.jsxs)(n.p,{children:["Get the Uppy instance ID, see the ",(0,s.jsx)(n.a,{href:"#id",children:(0,s.jsx)(n.code,{children:"id"})})," option."]}),"\n",(0,s.jsx)(n.h4,{id:"addfilefile",children:(0,s.jsx)(n.code,{children:"addFile(file)"})}),"\n",(0,s.jsxs)(n.p,{children:["Add a new file to Uppy\u2019s internal state. ",(0,s.jsx)(n.code,{children:"addFile"})," will return the generated id\nfor the file that was added."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"addFile"})," gives an error if the file cannot be added, either because\n",(0,s.jsx)(n.code,{children:"onBeforeFileAdded(file)"})," gave an error, or because ",(0,s.jsx)(n.code,{children:"uppy.opts.restrictions"}),"\nchecks failed."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"uppy.addFile({\n\tname: 'my-file.jpg', // file name\n\ttype: 'image/jpeg', // file type\n\tdata: blob, // file blob\n\tmeta: {\n\t\t// optional, store the directory path of a file so Uppy can tell identical files in different directories apart.\n\t\trelativePath: webkitFileSystemEntry.relativePath,\n\t},\n\tsource: 'Local', // optional, determines the source of the file, for example, Instagram.\n\tisRemote: false, // optional, set to true if actual file is not in the browser, but on some remote server, for example,\n\t// when using companion in combination with Instagram.\n});\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["If you try to add a file that already exists, ",(0,s.jsx)(n.code,{children:"addFile"})," will throw an error.\nUnless that duplicate file was dropped with a folder \u2014 duplicate files from\ndifferent folders are allowed, when selected with that folder. This is because\nwe add ",(0,s.jsx)(n.code,{children:"file.meta.relativePath"})," to the ",(0,s.jsx)(n.code,{children:"file.id"}),"."]})}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["Checkout ",(0,s.jsx)(n.a,{href:"#working-with-uppy-files",children:"working with Uppy files"}),"."]})}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["If ",(0,s.jsx)(n.code,{children:"uppy.opts.autoProceed === true"}),", Uppy will begin uploading automatically\nwhen files are added."]})}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["Sometimes you might need to add a remote file to Uppy. This can be achieved by\n",(0,s.jsx)(n.a,{href:"https://github.com/transloadit/uppy/issues/1006#issuecomment-413495493",children:"fetching the file, then creating a Blob object, or using the Url plugin with Companion"}),"."]})}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["Sometimes you might need to mark some files as \u201calready uploaded\u201d, so that the\nuser sees them, but they won\u2019t actually be uploaded by Uppy. This can be\nachieved by\n",(0,s.jsxs)(n.a,{href:"https://github.com/transloadit/uppy/issues/1112#issuecomment-432339569",children:["looping through files and setting ",(0,s.jsx)(n.code,{children:"uploadComplete: true, uploadStarted: true"})," on them"]})]})}),"\n",(0,s.jsx)(n.h4,{id:"removefilefileid",children:(0,s.jsx)(n.code,{children:"removeFile(fileID)"})}),"\n",(0,s.jsx)(n.p,{children:"Remove a file from Uppy. Removing a file that is already being uploaded cancels\nthat upload."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"uppy.removeFile('uppyteamkongjpg1501851828779');\n"})}),"\n",(0,s.jsx)(n.h4,{id:"clear",children:(0,s.jsx)(n.code,{children:"clear()"})}),"\n",(0,s.jsx)(n.p,{children:"Clear the state. Can be useful for manually resetting Uppy after a successful\nupload. Note that this method might throw an error if you try to call it while\nan upload is ongoing."}),"\n",(0,s.jsx)(n.p,{children:"Upload plugins may choose to throw an error if called during an upload."}),"\n",(0,s.jsx)(n.h4,{id:"getfilefileid",children:(0,s.jsx)(n.code,{children:"getFile(fileID)"})}),"\n",(0,s.jsxs)(n.p,{children:["Get a specific ",(0,s.jsx)(n.a,{href:"#working-with-uppy-files",children:"Uppy file"})," by its ID."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const file = uppy.getFile('uppyteamkongjpg1501851828779');\n"})}),"\n",(0,s.jsx)(n.h4,{id:"getfiles",children:(0,s.jsx)(n.code,{children:"getFiles()"})}),"\n",(0,s.jsxs)(n.p,{children:["Get an array of all added ",(0,s.jsx)(n.a,{href:"#working-with-uppy-files",children:"Uppy files"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const files = uppy.getFiles();\n"})}),"\n",(0,s.jsx)(n.h4,{id:"upload",children:(0,s.jsx)(n.code,{children:"upload()"})}),"\n",(0,s.jsx)(n.p,{children:"Start uploading added files."}),"\n",(0,s.jsxs)(n.p,{children:["Returns a Promise ",(0,s.jsx)(n.code,{children:"result"})," that resolves with an object containing two arrays of\nuploaded files:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"result.successful"})," - Files that were uploaded successfully."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"result.failed"})," - Files that did not upload successfully. These files will\nhave a ",(0,s.jsx)(n.code,{children:".error"})," property describing what went wrong."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"uppy.upload().then((result) => {\n\tconsole.info('Successful uploads:', result.successful);\n\n\tif (result.failed.length > 0) {\n\t\tconsole.error('Errors:');\n\t\tresult.failed.forEach((file) => {\n\t\t\tconsole.error(file.error);\n\t\t});\n\t}\n});\n"})}),"\n",(0,s.jsx)(n.h4,{id:"pauseresumefileid",children:(0,s.jsx)(n.code,{children:"pauseResume(fileID)"})}),"\n",(0,s.jsxs)(n.p,{children:["Toggle pause/resume on an upload. Will only work if resumable upload plugin,\nsuch as ",(0,s.jsx)(n.a,{href:"/docs/tus/",children:"Tus"}),", is used."]}),"\n",(0,s.jsx)(n.h4,{id:"pauseall",children:(0,s.jsx)(n.code,{children:"pauseAll()"})}),"\n",(0,s.jsxs)(n.p,{children:["Pause all uploads. Will only work if a resumable upload plugin, such as\n",(0,s.jsx)(n.a,{href:"/docs/tus/",children:"Tus"}),", is used."]}),"\n",(0,s.jsx)(n.h4,{id:"resumeall",children:(0,s.jsx)(n.code,{children:"resumeAll()"})}),"\n",(0,s.jsxs)(n.p,{children:["Resume all uploads. Will only work if resumable upload plugin, such as\n",(0,s.jsx)(n.a,{href:"/docs/tus/",children:"Tus"}),", is used."]}),"\n",(0,s.jsx)(n.h4,{id:"retryuploadfileid",children:(0,s.jsx)(n.code,{children:"retryUpload(fileID)"})}),"\n",(0,s.jsx)(n.p,{children:"Retry an upload (after an error, for example)."}),"\n",(0,s.jsx)(n.h4,{id:"retryall",children:(0,s.jsx)(n.code,{children:"retryAll()"})}),"\n",(0,s.jsx)(n.p,{children:"Retry all uploads (after an error, for example)."}),"\n",(0,s.jsx)(n.h4,{id:"cancelall",children:(0,s.jsx)(n.code,{children:"cancelAll()"})}),"\n",(0,s.jsx)(n.p,{children:"Cancel all uploads, reset progress and remove all files. If you are using the\nTransloadit plugin, this will also cancel all running assemblies, even after an\nupload has finished."}),"\n",(0,s.jsx)(n.h4,{id:"setstatepatch",children:(0,s.jsx)(n.code,{children:"setState(patch)"})}),"\n",(0,s.jsx)(n.p,{children:"Update Uppy\u2019s internal state. Usually, this method is called internally, but in\nsome cases it might be useful to alter something directly, especially when\nimplementing your own plugins."}),"\n",(0,s.jsx)(n.p,{children:"Uppy\u2019s default state on initialization:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const state = {\n\tplugins: {},\n\tfiles: {},\n\tcurrentUploads: {},\n\tcapabilities: {\n\t\tresumableUploads: false,\n\t},\n\ttotalProgress: 0,\n\tmeta: { ...this.opts.meta },\n\tinfo: {\n\t\tisHidden: true,\n\t\ttype: 'info',\n\t\tmessage: '',\n\t},\n};\n"})}),"\n",(0,s.jsx)(n.p,{children:"Updating state:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"uppy.setState({ smth: true });\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["State in Uppy is considered to be immutable. When updating values, make sure not\nmutate them, but instead create copies. See\n",(0,s.jsx)(n.a,{href:"http://redux.js.org/docs/recipes/UsingObjectSpreadOperator.html",children:"Redux docs"}),"\nfor more info on this."]})}),"\n",(0,s.jsx)(n.h4,{id:"getstate",children:(0,s.jsx)(n.code,{children:"getState()"})}),"\n",(0,s.jsxs)(n.p,{children:["Returns the current state from the ",(0,s.jsx)(n.a,{href:"#store",children:"Store"}),"."]}),"\n",(0,s.jsx)(n.h4,{id:"setfilestatefileid-state",children:(0,s.jsx)(n.code,{children:"setFileState(fileID, state)"})}),"\n",(0,s.jsxs)(n.p,{children:["Update the state for a single file. This is mostly useful for plugins that may\nwant to store data on ",(0,s.jsx)(n.a,{href:"#working-with-uppy-files",children:"Uppy files"}),", or need to pass\nfile-specific configurations to other plugins that support it."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"fileID"})," is the string file ID. ",(0,s.jsx)(n.code,{children:"state"})," is an object that will be merged into\nthe file\u2019s state object."]}),"\n",(0,s.jsx)(n.h4,{id:"setmetadata",children:(0,s.jsx)(n.code,{children:"setMeta(data)"})}),"\n",(0,s.jsxs)(n.p,{children:["Alters global ",(0,s.jsx)(n.code,{children:"meta"})," object in state, the one that can be set in Uppy options\nand gets merged with all newly added files. Calling ",(0,s.jsx)(n.code,{children:"setMeta"})," will also merge\nnewly added meta data with files that had been selected before."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"uppy.setMeta({ resize: 1500, token: 'ab5kjfg' });\n"})}),"\n",(0,s.jsx)(n.h4,{id:"setfilemetafileid-data",children:(0,s.jsx)(n.code,{children:"setFileMeta(fileID, data)"})}),"\n",(0,s.jsx)(n.p,{children:"Update metadata for a specific file."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"uppy.setFileMeta('myfileID', { resize: 1500 });\n"})}),"\n",(0,s.jsx)(n.h4,{id:"setoptionsopts",children:(0,s.jsx)(n.code,{children:"setOptions(opts)"})}),"\n",(0,s.jsx)(n.p,{children:"Change the options Uppy initialized with."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const uppy = new Uppy();\n\nuppy.setOptions({\n\trestrictions: { maxNumberOfFiles: 3 },\n\tautoProceed: true,\n});\n\nuppy.setOptions({\n\tlocale: {\n\t\tstrings: {\n\t\t\tcancel: '\u041e\u0442\u043c\u0435\u043d\u0430',\n\t\t},\n\t},\n});\n"})}),"\n",(0,s.jsx)(n.p,{children:"You can also change options for plugin:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// Change width of the Dashboard drag-and-drop aread on the fly\nuppy.getPlugin('Dashboard').setOptions({\n\twidth: 300,\n});\n"})}),"\n",(0,s.jsx)(n.h4,{id:"destroy",children:(0,s.jsx)(n.code,{children:"destroy()"})}),"\n",(0,s.jsxs)(n.p,{children:["Uninstall all plugins and close down this Uppy instance. Also runs\n",(0,s.jsx)(n.code,{children:"uppy.cancelAll()"})," before uninstalling. Note that this method should not\nnormally be used. If you only want reset the Uppy instance so that you can start\na new upload, you probably want to use ",(0,s.jsx)(n.code,{children:"clear()"})," method instead."]}),"\n",(0,s.jsx)(n.h4,{id:"logout",children:(0,s.jsx)(n.code,{children:"logout()"})}),"\n",(0,s.jsxs)(n.p,{children:["Calls ",(0,s.jsx)(n.code,{children:"provider.logout()"})," on each remote provider plugin (Google Drive,\nInstagram, etc). Useful, for example, after your users log out of their account\nin your app \u2014 this will clean things up with Uppy cloud providers as well, for\nextra security."]}),"\n",(0,s.jsx)(n.h4,{id:"logmessage-type",children:(0,s.jsx)(n.code,{children:"log(message, type)"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Argument"}),(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"message"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string"})}),(0,s.jsx)(n.td,{children:"message to log"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"type"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string?"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"debug"}),", ",(0,s.jsx)(n.code,{children:"warn"}),", or ",(0,s.jsx)(n.code,{children:"error"})]})]})]})]}),"\n",(0,s.jsxs)(n.p,{children:["See ",(0,s.jsx)(n.a,{href:"#logger",children:(0,s.jsx)(n.code,{children:"logger"})})," docs for details."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"uppy.log('[Dashboard] adding files...');\n"})}),"\n",(0,s.jsx)(n.h4,{id:"infomessage-type-duration",children:(0,s.jsx)(n.code,{children:"info(message, type, duration)"})}),"\n",(0,s.jsxs)(n.p,{children:["Sets a message in state, with optional details, that can be shown by\nnotification UI plugins. It\u2019s using the ",(0,s.jsx)(n.a,{href:"/docs/informer",children:"Informer"})," plugin,\nincluded by default in Dashboard."]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Argument"}),(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"message"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"string"}),", ",(0,s.jsx)(n.code,{children:"Object"})]}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"'info message'"})," or ",(0,s.jsx)(n.code,{children:"{ message: 'Oh no!', details: 'File couldn\u2019t be uploaded' }"})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"type"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"string?"})}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"'info'"}),", ",(0,s.jsx)(n.code,{children:"'warning'"}),", ",(0,s.jsx)(n.code,{children:"'success'"})," or ",(0,s.jsx)(n.code,{children:"'error'"})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"duration"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"number?"})}),(0,s.jsx)(n.td,{children:"in milliseconds"})]})]})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"info-visible"})," and ",(0,s.jsx)(n.code,{children:"info-hidden"})," events are emitted when this info message\nshould be visible or hidden."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"this.info('Oh my, something good happened!', 'success', 3000);\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"this.info(\n\t{\n\t\tmessage: 'Oh no, something bad happened!',\n\t\tdetails:\n\t\t\t'File couldn\u2019t be uploaded because there is no internet connection',\n\t},\n\t'error',\n\t5000,\n);\n"})}),"\n",(0,s.jsx)(n.h4,{id:"addpreprocessorfn",children:(0,s.jsx)(n.code,{children:"addPreProcessor(fn)"})}),"\n",(0,s.jsxs)(n.p,{children:["Add a preprocessing function. ",(0,s.jsx)(n.code,{children:"fn"})," gets called with a list of file IDs before an\nupload starts. ",(0,s.jsx)(n.code,{children:"fn"})," should return a Promise. Its resolution value is ignored."]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["To change file data and such, use Uppy state updates, for example using\n",(0,s.jsx)(n.a,{href:"#setfilestatefileid-state",children:(0,s.jsx)(n.code,{children:"setFileState"})}),"."]})}),"\n",(0,s.jsx)(n.h4,{id:"adduploaderfn",children:(0,s.jsx)(n.code,{children:"addUploader(fn)"})}),"\n",(0,s.jsxs)(n.p,{children:["Add an uploader function. ",(0,s.jsx)(n.code,{children:"fn"})," gets called with a list of file IDs when an\nupload should start. Uploader functions should do the actual uploading work,\nsuch as creating and sending an XMLHttpRequest or calling into some upload\nservice SDK. ",(0,s.jsx)(n.code,{children:"fn"})," should return a Promise that resolves once all files have been\nuploaded."]}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["You may choose to still resolve the Promise if some file uploads fail. This way,\nany postprocessing will still run on the files that were uploaded successfully,\nwhile uploads that failed will be retried when ",(0,s.jsx)(n.a,{href:"#retryall",children:(0,s.jsx)(n.code,{children:"retryAll"})})," is\ncalled."]})}),"\n",(0,s.jsx)(n.h4,{id:"addpostprocessorfn",children:(0,s.jsx)(n.code,{children:"addPostProcessor(fn)"})}),"\n",(0,s.jsxs)(n.p,{children:["Add a postprocessing function. ",(0,s.jsx)(n.code,{children:"fn"})," is called with a list of file IDs when an\nupload has finished. ",(0,s.jsx)(n.code,{children:"fn"})," should return a Promise that resolves when the\nprocessing work is complete. The value of the Promise is ignored."]}),"\n",(0,s.jsx)(n.p,{children:"For example, you could wait for file encoding or CDN propagation to complete, or\nyou could do an HTTP API call to create an album containing all images that were\nuploaded."}),"\n",(0,s.jsx)(n.h4,{id:"removepreprocessorremoveuploaderremovepostprocessorfn",children:(0,s.jsx)(n.code,{children:"removePreProcessor/removeUploader/removePostProcessor(fn)"})}),"\n",(0,s.jsxs)(n.p,{children:["Remove a processor or uploader function that was added before. Normally, this\nshould be done in the ",(0,s.jsx)(n.a,{href:"#uninstall",children:(0,s.jsx)(n.code,{children:"uninstall()"})})," method."]}),"\n",(0,s.jsx)(n.h4,{id:"onevent-action",children:(0,s.jsx)(n.code,{children:"on('event', action)"})}),"\n",(0,s.jsx)(n.p,{children:"Subscribe to an uppy-event. See below for the full list of events."}),"\n",(0,s.jsx)(n.h4,{id:"onceevent-action",children:(0,s.jsx)(n.code,{children:"once('event', action)"})}),"\n",(0,s.jsx)(n.p,{children:"Create an event listener that fires once. See below for the full list of events."}),"\n",(0,s.jsx)(n.h4,{id:"offevent-action",children:(0,s.jsx)(n.code,{children:"off('event', action)"})}),"\n",(0,s.jsx)(n.p,{children:"Unsubscribe to an uppy-event. See below for the full list of events."}),"\n",(0,s.jsx)(n.h3,{id:"events",children:"Events"}),"\n",(0,s.jsx)(n.p,{children:"Uppy exposes events that you can subscribe to for side-effects."}),"\n",(0,s.jsx)(n.h4,{id:"file-added",children:(0,s.jsx)(n.code,{children:"file-added"})}),"\n",(0,s.jsx)(n.p,{children:"Fired each time a file is added."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"file"})," - The ",(0,s.jsx)(n.a,{href:"#working-with-uppy-files",children:"Uppy file"})," that was added."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"uppy.on('file-added', (file) => {\n\tconsole.log('Added file', file);\n});\n"})}),"\n",(0,s.jsx)(n.h4,{id:"files-added",children:(0,s.jsx)(n.code,{children:"files-added"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"files"})," - Array of ",(0,s.jsx)(n.a,{href:"#working-with-uppy-files",children:"Uppy files"})," which were added at\nonce, in a batch."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Fired each time when one or more files are added \u2014 one event, for all files"}),"\n",(0,s.jsx)(n.h4,{id:"file-removed",children:(0,s.jsx)(n.code,{children:"file-removed"})}),"\n",(0,s.jsx)(n.p,{children:"Fired each time a file is removed."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"file"})," - The ",(0,s.jsx)(n.a,{href:"#working-with-uppy-files",children:"Uppy file"})," that was removed."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"uppy.on('file-removed', (file) => {\n\tconsole.log('Removed file', file);\n});\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"uppy.on('file-removed', (file) => {\n\tremoveFileFromUploadingCounterUI(file);\n\tsendDeleteRequestForFile(file);\n});\n"})}),"\n",(0,s.jsx)(n.h4,{id:"upload-1",children:(0,s.jsx)(n.code,{children:"upload"})}),"\n",(0,s.jsx)(n.p,{children:"Fired when the upload starts."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"uploadID"})," (",(0,s.jsx)(n.code,{children:"string)"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"files"})," (",(0,s.jsx)(n.code,{children:"UppyFile<M,B>"}),")"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"preprocess-progress",children:(0,s.jsx)(n.code,{children:"preprocess-progress"})}),"\n",(0,s.jsx)(n.p,{children:"Progress of the pre-processors."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"progress"})," is an object with properties:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"mode"})," - Either ",(0,s.jsx)(n.code,{children:"'determinate'"})," or ",(0,s.jsx)(n.code,{children:"'indeterminate'"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"message"})," - A message to show to the user. Something like\n",(0,s.jsx)(n.code,{children:"'Preparing upload...'"}),", but be more specific if possible."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["When ",(0,s.jsx)(n.code,{children:"mode"})," is ",(0,s.jsx)(n.code,{children:"'determinate'"}),", also add the ",(0,s.jsx)(n.code,{children:"value"})," property:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"value"})," - A progress value between 0 and 1."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"progress",children:(0,s.jsx)(n.code,{children:"progress"})}),"\n",(0,s.jsx)(n.p,{children:"Fired each time the total upload progress is updated:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"progress"})," - An integer (0-100) representing the total upload progress."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"uppy.on('progress', (progress) => {\n\t// progress: integer (total progress percentage)\n\tconsole.log(progress);\n});\n"})}),"\n",(0,s.jsx)(n.h4,{id:"upload-progress",children:(0,s.jsx)(n.code,{children:"upload-progress"})}),"\n",(0,s.jsx)(n.p,{children:"Fired each time an individual file upload progress is available:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"file"})," - The ",(0,s.jsx)(n.a,{href:"#working-with-uppy-files",children:"Uppy file"})," that has progressed."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"progress"})," - The same object as in ",(0,s.jsx)(n.code,{children:"file.progress"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"uppy.on('upload-progress', (file, progress) => {\n\t// file: { id, name, type, ... }\n\t// progress: { uploader, bytesUploaded, bytesTotal }\n\tconsole.log(file.id, progress.bytesUploaded, progress.bytesTotal);\n});\n"})}),"\n",(0,s.jsx)(n.h4,{id:"upload-pause",children:(0,s.jsx)(n.code,{children:"upload-pause"})}),"\n",(0,s.jsx)(n.p,{children:"Fired when an individual upload is (un)paused."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"file"})," (",(0,s.jsx)(n.code,{children:"UppyFile<M,B>"}),")"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"isPaused"})," (",(0,s.jsx)(n.code,{children:"boolean"}),")"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"postprocess-progress",children:(0,s.jsx)(n.code,{children:"postprocess-progress"})}),"\n",(0,s.jsx)(n.p,{children:"Progress of the post-processors."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"progress"})," is an object with properties:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"mode"})," - Either ",(0,s.jsx)(n.code,{children:"'determinate'"})," or ",(0,s.jsx)(n.code,{children:"'indeterminate'"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"message"})," - A message to show to the user. Something like\n",(0,s.jsx)(n.code,{children:"'Preparing upload...'"}),", but be more specific if possible."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["When ",(0,s.jsx)(n.code,{children:"mode"})," is ",(0,s.jsx)(n.code,{children:"'determinate'"}),", also add the ",(0,s.jsx)(n.code,{children:"value"})," property:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"value"})," - A progress value between 0 and 1."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"upload-success",children:(0,s.jsx)(n.code,{children:"upload-success"})}),"\n",(0,s.jsx)(n.p,{children:"Fired each time a single upload is completed."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"file"})," - The ",(0,s.jsx)(n.a,{href:"#working-with-uppy-files",children:"Uppy file"})," that was uploaded."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"response"})," - An object with response data from the remote endpoint. The actual\ncontents depend on the upload plugin that is used."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["For ",(0,s.jsx)(n.code,{children:"@uppy/xhr-upload"}),", the shape is:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n\t"status": 200, // HTTP status code (0, 200, 300)\n\t"body": "\u2026", // response body\n\t"uploadURL": "\u2026" // the file url, if it was returned\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"uppy.on('upload-success', (file, response) => {\n\tconsole.log(file.name, response.uploadURL);\n\tconst img = new Image();\n\timg.width = 300;\n\timg.alt = file.id;\n\timg.src = response.uploadURL;\n\tdocument.body.appendChild(img);\n});\n"})}),"\n",(0,s.jsx)(n.h4,{id:"complete",children:(0,s.jsx)(n.code,{children:"complete"})}),"\n",(0,s.jsx)(n.p,{children:"Fired when all uploads are complete."}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"result"})," parameter is an object with arrays of ",(0,s.jsx)(n.code,{children:"successful"})," and ",(0,s.jsx)(n.code,{children:"failed"}),"\nfiles, as in ",(0,s.jsx)(n.a,{href:"#upload",children:(0,s.jsx)(n.code,{children:"uppy.upload()"})}),"\u2019s return value."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"uppy.on('complete', (result) => {\n\tconsole.log('successful files:', result.successful);\n\tconsole.log('failed files:', result.failed);\n});\n"})}),"\n",(0,s.jsx)(n.h4,{id:"error",children:(0,s.jsx)(n.code,{children:"error"})}),"\n",(0,s.jsx)(n.p,{children:"Fired when Uppy fails to upload/encode the entire upload."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"error"})," - The error object."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"uppy.on('error', (error) => {\n\tconsole.error(error.stack);\n});\n"})}),"\n",(0,s.jsx)(n.h4,{id:"upload-error",children:(0,s.jsx)(n.code,{children:"upload-error"})}),"\n",(0,s.jsx)(n.p,{children:"Fired each time a single upload failed."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"file"})," - The ",(0,s.jsx)(n.a,{href:"#working-with-uppy-files",children:"Uppy file"})," which didn\u2019t upload."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"error"})," - The error object."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"response"})," - an optional parameter with response data from the upload\nendpoint."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"It may be undefined or contain different data depending on the upload plugin in\nuse."}),"\n",(0,s.jsxs)(n.p,{children:["For ",(0,s.jsx)(n.code,{children:"@uppy/xhr-upload"}),", the shape is:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n\t"status": 200, // HTTP status code (0, 200, 300)\n\t"body": "\u2026" // response body\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"uppy.on('upload-error', (file, error, response) => {\n\tconsole.log('error with file:', file.id);\n\tconsole.log('error message:', error);\n});\n"})}),"\n",(0,s.jsxs)(n.p,{children:["If the error is related to network conditions \u2014 endpoint unreachable due to\nfirewall or ISP blockage, for instance \u2014 the error will have\n",(0,s.jsx)(n.code,{children:"error.isNetworkError"})," property set to ",(0,s.jsx)(n.code,{children:"true"}),". Here\u2019s how you can check for\nnetwork errors:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"uppy.on('upload-error', (file, error, response) => {\n\tif (error.isNetworkError) {\n\t\t// Let your users know that file upload could have failed\n\t\t// due to firewall or ISP issues\n\t\talertUserAboutPossibleFirewallOrISPIssues(error);\n\t}\n});\n"})}),"\n",(0,s.jsx)(n.h4,{id:"upload-retry",children:(0,s.jsx)(n.code,{children:"upload-retry"})}),"\n",(0,s.jsx)(n.p,{children:"Fired when an upload has been retried (after an error, for example)."}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["This event is not triggered when the user retries all uploads, it will trigger\nthe ",(0,s.jsx)(n.code,{children:"retry-all"})," event instead."]})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"file"})," (",(0,s.jsx)(n.code,{children:"UppyFile<M,B>"}),")"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"uppy.on('upload-retry', (fileID) => {\n\tconsole.log('upload retried:', fileID);\n});\n"})}),"\n",(0,s.jsx)(n.h4,{id:"upload-stalled",children:(0,s.jsx)(n.code,{children:"upload-stalled"})}),"\n",(0,s.jsxs)(n.p,{children:["Fired when an upload has not received any progress in some time (in\n",(0,s.jsx)(n.code,{children:"@uppy/xhr-upload"}),", the delay is defined by the ",(0,s.jsx)(n.code,{children:"timeout"})," option). Use this\nevent to display a message on the UI to tell the user they might want to retry\nthe upload."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"uppy.on('upload-stalled', (error, files) => {\n\tconsole.log('upload seems stalled', error, files);\n\tconst noLongerStalledEventHandler = (file) => {\n\t\tif (files.includes(file)) {\n\t\t\tconsole.log('upload is no longer stalled');\n\t\t\tuppy.off('upload-progress', noLongerStalledEventHandler);\n\t\t}\n\t};\n\tuppy.on('upload-progress', noLongerStalledEventHandler);\n});\n"})}),"\n",(0,s.jsx)(n.h4,{id:"retry-all",children:(0,s.jsx)(n.code,{children:"retry-all"})}),"\n",(0,s.jsx)(n.p,{children:"Fired when all failed uploads are retried"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"files"})," (",(0,s.jsx)(n.code,{children:"UppyFile<M,B>[]"}),")"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"uppy.on('retry-all', (fileIDs) => {\n\tconsole.log('upload retried:', fileIDs);\n});\n"})}),"\n",(0,s.jsx)(n.h4,{id:"info-visible",children:(0,s.jsx)(n.code,{children:"info-visible"})}),"\n",(0,s.jsxs)(n.p,{children:["Fired when \u201cinfo\u201d message should be visible in the UI. By default, ",(0,s.jsx)(n.code,{children:"Informer"}),"\nplugin is displaying these messages (enabled by default in ",(0,s.jsx)(n.code,{children:"Dashboard"})," plugin).\nYou can use this event to show messages in your custom UI:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"uppy.on('info-visible', () => {\n\tconst { info } = uppy.getState();\n\t// info: {\n\t//  isHidden: false,\n\t//  type: 'error',\n\t//  message: 'Failed to upload',\n\t//  details: 'Error description'\n\t// }\n\tconsole.log(`${info.message} ${info.details}`);\n});\n"})}),"\n",(0,s.jsx)(n.h4,{id:"info-hidden",children:(0,s.jsx)(n.code,{children:"info-hidden"})}),"\n",(0,s.jsxs)(n.p,{children:["Fired when \u201cinfo\u201d message should be hidden in the UI. See\n",(0,s.jsx)(n.a,{href:"#info-visible",children:(0,s.jsx)(n.code,{children:"info-visible"})}),"."]}),"\n",(0,s.jsx)(n.h4,{id:"cancel-all",children:(0,s.jsx)(n.code,{children:"cancel-all"})}),"\n",(0,s.jsxs)(n.p,{children:["Fired when ",(0,s.jsx)(n.code,{children:"cancelAll()"})," is called, all uploads are canceled, files removed and\nprogress is reset."]}),"\n",(0,s.jsx)(n.h4,{id:"restriction-failed",children:(0,s.jsx)(n.code,{children:"restriction-failed"})}),"\n",(0,s.jsx)(n.p,{children:"Fired when a file violates certain restrictions when added. This event is\nproviding another choice for those who want to customize the behavior of file\nupload restrictions."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"uppy.on('restriction-failed', (file, error) => {\n\t// do some customized logic like showing system notice to users\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"new-basepluginuppy-options",children:(0,s.jsx)(n.code,{children:"new BasePlugin(uppy, options?)"})}),"\n",(0,s.jsx)(n.p,{children:"The initial building block for a plugin."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"BasePlugin"})," does not contain DOM rendering so it can be used for plugins\nwithout an user interface."]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["See ",(0,s.jsx)(n.a,{href:"#new-uipluginuppy-options",children:(0,s.jsx)(n.code,{children:"UIPlugin"})})," for the extended version with Preact rendering for\ninterfaces."]})}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["Checkout the ",(0,s.jsx)(n.a,{href:"/docs/guides/building-plugins",children:"building plugins"})," guide."]})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["If you don\u2019t use any UI plugins, any modern bundler should be able to tree-shake\nPreact code away. If you are not using a bundler that supports tree-shaking,\nit\u2019s also possible to import ",(0,s.jsx)(n.code,{children:"BasePlugin"})," like this:\n",(0,s.jsx)(n.code,{children:"import BasePlugin from '@uppy/core/lib/BasePlugin.js"}),"."]})}),"\n",(0,s.jsx)(n.h3,{id:"options-1",children:"Options"}),"\n",(0,s.jsxs)(n.p,{children:["The options passed to ",(0,s.jsx)(n.code,{children:"BasePlugin"})," are all you options you wish to support in\nyour plugin."]}),"\n",(0,s.jsxs)(n.p,{children:["You should pass the options to ",(0,s.jsx)(n.code,{children:"super"})," in your plugin class:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"class MyPlugin extends BasePlugin {\n\tconstructor(uppy, opts) {\n\t\tsuper(uppy, opts);\n\t}\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"methods-1",children:"Methods"}),"\n",(0,s.jsx)(n.h4,{id:"setoptionsoptions",children:(0,s.jsx)(n.code,{children:"setOptions(options)"})}),"\n",(0,s.jsxs)(n.p,{children:["Options passed during initialization can also be altered dynamically with\n",(0,s.jsx)(n.code,{children:"setOptions"}),"."]}),"\n",(0,s.jsx)(n.h4,{id:"getpluginstate",children:(0,s.jsx)(n.code,{children:"getPluginState()"})}),"\n",(0,s.jsxs)(n.p,{children:["Retrieves the plugin state from the ",(0,s.jsx)(n.code,{children:"Uppy"})," class. Uppy keeps a ",(0,s.jsx)(n.code,{children:"plugins"})," object\nin state in which each key is the plugin\u2019s ",(0,s.jsx)(n.code,{children:"id"}),", and the value its state."]}),"\n",(0,s.jsx)(n.h4,{id:"setpluginstate",children:(0,s.jsx)(n.code,{children:"setPluginState()"})}),"\n",(0,s.jsxs)(n.p,{children:["Set the plugin state in the ",(0,s.jsx)(n.code,{children:"Uppy"})," class. Uppy keeps a ",(0,s.jsx)(n.code,{children:"plugins"})," object in state\nin which each key is the plugin\u2019s ",(0,s.jsx)(n.code,{children:"id"}),", and the value its state."]}),"\n",(0,s.jsx)(n.h4,{id:"install-1",children:(0,s.jsx)(n.code,{children:"install()"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"install"})," method is ran once, when the plugin is added to Uppy with\n",(0,s.jsx)(n.code,{children:".use()"}),". Use this to initialize the plugin."]}),"\n",(0,s.jsxs)(n.p,{children:["For example, if you are creating a pre-processor (such as\n",(0,s.jsx)(n.a,{href:"/docs/compressor",children:"@uppy/compressor"}),") you must add it:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"install () {\n  this.uppy.addPreProcessor(this.prepareUpload)\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Another common thing to do when creating a\n",(0,s.jsx)(n.a,{href:"#new-uipluginuppy-options",children:"UI plugin"})," is to ",(0,s.jsx)(n.a,{href:"#mounttarget",children:(0,s.jsx)(n.code,{children:"mount"})})," it to the\nDOM:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"install () {\n  const { target } = this.opts\n  if (target) {\n    this.mount(target, this)\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"uninstall",children:(0,s.jsx)(n.code,{children:"uninstall()"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"uninstall"})," method is ran once, when the plugin is removed from Uppy. This\nhappens when ",(0,s.jsx)(n.code,{children:".close()"})," is called or when the plugin is destroyed in a framework\nintegration."]}),"\n",(0,s.jsx)(n.p,{children:"Use this to clean things up."}),"\n",(0,s.jsx)(n.p,{children:"For instance when creating a pre-processor, uploader, or post-processor to\nremove it:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"uninstall () {\n  this.uppy.removePreProcessor(this.prepareUpload)\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["When creating a ",(0,s.jsx)(n.a,{href:"#new-uipluginuppy-options",children:"UI plugin"})," you should\n",(0,s.jsx)(n.a,{href:"#unmount",children:(0,s.jsx)(n.code,{children:"unmount"})})," it from the DOM:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"uninstall () {\n  this.unmount()\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"i18ninit",children:(0,s.jsx)(n.code,{children:"i18nInit"})}),"\n",(0,s.jsxs)(n.p,{children:["Call ",(0,s.jsx)(n.code,{children:"this.i18nInit()"})," once in the constructor of your plugin class to\ninitialize ",(0,s.jsx)(n.a,{href:"/docs/locales",children:"internationalisation"}),"."]}),"\n",(0,s.jsx)(n.h4,{id:"addtarget",children:(0,s.jsx)(n.code,{children:"addTarget"})}),"\n",(0,s.jsxs)(n.p,{children:["You can use this method to make your plugin a ",(0,s.jsx)(n.code,{children:"target"})," for other plugins. This\nis what ",(0,s.jsx)(n.code,{children:"@uppy/dashboard"})," uses to add other plugins to its UI."]}),"\n",(0,s.jsx)(n.h4,{id:"update",children:(0,s.jsx)(n.code,{children:"update"})}),"\n",(0,s.jsx)(n.p,{children:"Called on each state update. You will rarely need to use this, unless if you\nwant to build a UI plugin using something other than Preact."}),"\n",(0,s.jsx)(n.h4,{id:"afterupdate",children:(0,s.jsx)(n.code,{children:"afterUpdate"})}),"\n",(0,s.jsx)(n.p,{children:"Called after every state update with a debounce, after everything has mounted."}),"\n",(0,s.jsx)(n.h2,{id:"new-uipluginuppy-options",children:(0,s.jsx)(n.code,{children:"new UIPlugin(uppy, options?)"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"UIPlugin"})," extends ",(0,s.jsx)(n.a,{href:"#new-basepluginuppy-options",children:(0,s.jsx)(n.code,{children:"BasePlugin"})})," to add rendering with\n",(0,s.jsx)(n.a,{href:"https://preactjs.com/",children:"Preact"}),". Use this when you want to create an user\ninterface or an addition to one, such as ",(0,s.jsx)(n.a,{href:"/docs/dashboard",children:"Dashboard"}),"."]}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["See ",(0,s.jsx)(n.a,{href:"#new-basepluginuppy-options",children:(0,s.jsx)(n.code,{children:"BasePlugin"})})," for the initial building block for all plugins."]})}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["Checkout the ",(0,s.jsx)(n.a,{href:"/docs/guides/building-plugins",children:"building plugins"})," guide."]})}),"\n",(0,s.jsx)(n.h3,{id:"options-2",children:"Options"}),"\n",(0,s.jsxs)(n.p,{children:["The options passed to ",(0,s.jsx)(n.code,{children:"UIPlugin"})," are all you options you wish to support in your\nplugin."]}),"\n",(0,s.jsxs)(n.p,{children:["You should pass the options to ",(0,s.jsx)(n.code,{children:"super"})," in your plugin class:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"class MyPlugin extends UIPlugin {\n\tconstructor(uppy, opts) {\n\t\tsuper(uppy, opts);\n\t}\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["In turn these are also passed to the underlying ",(0,s.jsx)(n.code,{children:"BasePlugin"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"methods-2",children:"Methods"}),"\n",(0,s.jsxs)(n.p,{children:["All the methods from ",(0,s.jsx)(n.a,{href:"#new-basepluginuppy-options",children:(0,s.jsx)(n.code,{children:"BasePlugin"})})," are also inherited into ",(0,s.jsx)(n.code,{children:"UIPlugin"}),"."]}),"\n",(0,s.jsx)(n.h4,{id:"mounttarget",children:(0,s.jsx)(n.code,{children:"mount(target)"})}),"\n",(0,s.jsxs)(n.p,{children:["Mount this plugin to the ",(0,s.jsx)(n.code,{children:"target"})," element. ",(0,s.jsx)(n.code,{children:"target"})," can be a CSS query selector,\na DOM element, or another Plugin. If ",(0,s.jsx)(n.code,{children:"target"})," is a Plugin, the source (current)\nplugin will register with the target plugin, and the latter can decide how and\nwhere to render the source plugin."]}),"\n",(0,s.jsx)(n.h4,{id:"onmount",children:(0,s.jsx)(n.code,{children:"onMount()"})}),"\n",(0,s.jsx)(n.p,{children:"Called after Preact has rendered the components of the plugin."}),"\n",(0,s.jsx)(n.h4,{id:"unmount",children:(0,s.jsx)(n.code,{children:"unmount"})}),"\n",(0,s.jsxs)(n.p,{children:["Removing the plugin from the DOM. You generally don\u2019t need to override it but\nyou should call it from ",(0,s.jsx)(n.a,{href:"#uninstall",children:(0,s.jsx)(n.code,{children:"uninstall"})}),"."]}),"\n",(0,s.jsx)(n.p,{children:"The default is:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"unmount () {\n  if (this.isTargetDOMEl) {\n    this.el?.remove()\n  }\n  this.onUnmount()\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"onunmount",children:(0,s.jsx)(n.code,{children:"onUnmount()"})}),"\n",(0,s.jsx)(n.p,{children:"Called after the elements have been removed from the DOM. Can be used to do some\nclean up or other side-effects."}),"\n",(0,s.jsx)(n.h4,{id:"render",children:(0,s.jsx)(n.code,{children:"render()"})}),"\n",(0,s.jsxs)(n.p,{children:["Render the UI of the plugin. Uppy uses ",(0,s.jsx)(n.a,{href:"https://preactjs.com",children:"Preact"})," as its\nview engine, so ",(0,s.jsx)(n.code,{children:"render()"})," should return a Preact element. ",(0,s.jsx)(n.code,{children:"render"})," is\nautomatically called by Uppy on each state change."]}),"\n",(0,s.jsx)(n.h4,{id:"updatestate",children:(0,s.jsx)(n.code,{children:"update(state)"})}),"\n",(0,s.jsx)(n.p,{children:"Called on each state update. You will rarely need to use this, unless if you\nwant to build a UI plugin using something other than Preact."}),"\n",(0,s.jsx)(n.h2,{id:"debuglogger",children:(0,s.jsx)(n.code,{children:"debugLogger()"})}),"\n",(0,s.jsx)(n.p,{children:"Logger with extra debug and warning logs for during development."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"import { Uppy, debugLogger } from '@uppy/core';\n\nnew Uppy({ logger: debugLogger });\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["You can also enable this logger by setting ",(0,s.jsx)(n.a,{href:"#debug",children:(0,s.jsx)(n.code,{children:"debug"})})," to ",(0,s.jsx)(n.code,{children:"true"}),"."]})}),"\n",(0,s.jsxs)(n.p,{children:["The default value of ",(0,s.jsx)(n.a,{href:"#logger",children:(0,s.jsx)(n.code,{children:"logger"})})," is ",(0,s.jsx)(n.code,{children:"justErrorsLogger"}),", which looks like\nthis:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// Swallow all logs, except errors.\n// default if logger is not set or debug: false\nconst justErrorsLogger = {\n\tdebug: () => {},\n\twarn: () => {},\n\terror: (...args) => console.error(`[Uppy] [${getTimeStamp()}]`, ...args),\n};\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"debugLogger"})," sends extra debugging and warning logs which could be helpful\nduring development:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"// Print logs to console with namespace + timestamp,\n// set by logger: Uppy.debugLogger or debug: true\nconst debugLogger = {\n\tdebug: (...args) => console.debug(`[Uppy] [${getTimeStamp()}]`, ...args),\n\twarn: (...args) => console.warn(`[Uppy] [${getTimeStamp()}]`, ...args),\n\terror: (...args) => console.error(`[Uppy] [${getTimeStamp()}]`, ...args),\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"frequently-asked-questions",children:"Frequently asked questions"}),"\n",(0,s.jsx)(n.h3,{id:"how-do-i-allow-duplicate-files",children:"How do I allow duplicate files?"}),"\n",(0,s.jsxs)(n.p,{children:["You can allow all files, even duplicate files, with\n",(0,s.jsx)(n.a,{href:"#onbeforefileadded",children:(0,s.jsx)(n.code,{children:"onBeforeFileAdded"})}),". This will override the file if it has\nnot been uploaded. If you upload a duplicate file again it depends on your\nupload plugin and backend how it is handled."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-js",children:"const uppy = new Uppy({\n  // ...\n  onBeforeFileAdded: () => true,\n"})})]})}function j(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},65171:(e,n,l)=>{l.d(n,{A:()=>c});var s=l(96540),i=l(21432),d=l(27293),o=l(4476),r=l(74848);const{rE:t}=o;function c(e){let{children:n,uppyCssName:l="uppy.min.css",uppyJsName:o="uppy.min.mjs"}=e,c=[];s.Children.toArray(n).forEach((e=>{c=[...c,...String(e).trim().split("\n").map((e=>e.trim()))]}));const a=c.map((e=>`  ${e}`)).join("\n"),h=`https://releases.transloadit.com/uppy/v${t}/${o}`,p=`\x3c!-- 1. Add CSS to \`<head>\` --\x3e\n<link href="https://releases.transloadit.com/uppy/v${t}/${l}" rel="stylesheet">\n\n\x3c!-- 2. Initialize --\x3e\n<div id="uppy"></div>\n\n<script type="module">\n${a.replace(/{{UPPY_JS_URL}}/g,h)}\n<\/script>\n`;return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(d.A,{type:"caution",children:[(0,r.jsx)("p",{children:"The bundle consists of most Uppy plugins, so this method is not recommended for production, as your users will have to download all plugins when you are likely using only a few."}),(0,r.jsx)("p",{children:"It can be useful to speed up your development environment, so don't hesitate to use it to get you started."})]}),(0,r.jsx)(i.A,{language:"html",children:p})]})}}}]);